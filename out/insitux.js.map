{"version":3,"file":"insitux.js","mappings":"mBACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,4mBCLhD,MAAMC,EAASC,GAAuBC,OAAOD,GACvCE,EAAQ,CAAIC,EAAUC,EAAgBC,IACjDF,EAAID,MAAME,EAAOC,GACNC,EAAS,CAAIH,EAAUC,EAAeG,IACjDJ,EAAIG,OAAOF,EAAOG,GACPC,EAAOL,GAA2BA,EAAIM,OACtCC,EAAQC,GAAwBA,EAAIF,OACpCG,EAASZ,IAA6BC,OAAOY,MAAMZ,OAAOD,IAC1Dc,EAAcd,GAAyBe,MAAMD,QAAQd,GACrDgB,EAAS,CAACL,EAAaP,EAAeK,IACjDE,EAAIM,UAAUb,EAAOA,GAASK,GAAUE,EAAIF,SACjCS,EAAS,CAACP,EAAaQ,IAAwBR,EAAIQ,GACnDC,EAAM,CAACpB,EAAWqB,IAAuBrB,EAAEsB,SAASD,GACpDE,EAAS,CAACvB,EAAWqB,IAAcrB,EAAEwB,QAAQH,GAC7CI,EAAM,CAAIzB,EAAQ0B,IAAkB1B,EAAEsB,SAASI,GAC/CC,EAAS,CAAChB,EAAaX,IAAuBW,EAAIiB,WAAW5B,GAC7D6B,EAAO,CAAClB,EAAaX,IAAuBW,EAAImB,SAAS9B,GACzD+B,EAAW5B,GAAoBA,EAAI4B,OACnCC,EAAS,CAAIC,EAAQC,IAAgBD,EAAED,OAAOE,GAC9CC,EAAO,CAAIhC,EAAUiC,IAAajC,EAAIgC,QAAQC,GAC9CC,EAAS,CAAIlC,EAAUmC,IAA+BnC,EAAIoC,KAAKD,GAC/DE,EAAcrC,GAAaA,EAAIqC,UAC/BC,EAAa9B,GAAgBA,EAAI+B,cACjCC,EAAahC,GAAgBA,EAAIiC,cACjCC,EAAQlC,GAAgBA,EAAIkC,OAC5BC,EAAanC,GAAgBA,EAAImC,YACjCC,EAAWpC,GAAgBA,EAAIoC,UAC/BC,EAAS,CAACrC,EAAa2B,IAAe3B,EAAIqC,OAAOV,GACjDW,EAAYtC,GAAwBA,EAAIuC,WAAW,GACnDC,EAAYC,GAAwBC,OAAOC,aAAaF,GACxDG,EAAU,CAACtB,EAAWC,IAAcD,EAAIuB,KAAKC,UAAYvB,EAAID,GAC7DyB,EAAU,CAACzB,EAAWC,IAAcsB,KAAKG,MAAMJ,EAAQtB,EAAGC,IAC1D0B,EAAS,GAAgB,IAAI7C,MAAM,GAAK8C,QACxCC,EAAW9D,GAAcb,OAAO0E,KAAK7D,GACrC+D,EAAY,KAAM,IAAIC,MAAOC,UAC7BC,EAAMV,KAAKU,IACXC,EAAMX,KAAKW,IACXC,EAAMZ,KAAKY,IACXC,EAAMb,KAAKa,IACXC,EAAMd,KAAKc,IACXC,EAAMf,KAAKe,IACXC,EAAOhB,KAAKgB,KACZC,EAAQjB,KAAKiB,MACbd,EAAQH,KAAKG,MACbe,EAAOlB,KAAKkB,KACZC,EAAOnB,KAAKmB,KACZC,EAAOpB,KAAKqB,IACZC,EAAOtB,KAAKsB,KACZC,EAAQvB,KAAKuB,MCqDbC,EAET,CACFC,MAAO,CAAEC,QAAS,CAAC,SACnB,YAAa,CAAEA,QAAS,CAAC,SACzB,IAAK,CAAEC,WAAY,EAAGD,QAAS,CAAC,SAChC,IAAK,CAAEE,SAAU,GACjB,KAAM,CAAEA,SAAU,GAClB,IAAK,CAAEA,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,KAAM,CAAED,SAAU,EAAGE,SAAU,EAAGD,SAAS,GAC3C,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,IAAK,CAAED,SAAU,EAAGC,SAAS,GAC7B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,KAAM,CAAED,SAAU,EAAGC,SAAS,GAC9B,QAAS,CAAEF,WAAY,GACvB,SAAU,CAAEA,WAAY,GACxB,QAAS,CAAEA,WAAY,EAAGE,SAAS,GACnC,QAAS,CAAEF,WAAY,EAAGE,SAAS,GACnC,QAAS,CAAEF,WAAY,EAAGE,SAAS,GACnC,QAAS,CAAEF,WAAY,EAAGE,SAAS,GACnC,SAAU,CAAEF,WAAY,EAAGE,SAAS,GACpC,QAAS,CAAEF,WAAY,EAAGE,SAAS,GACnC,QAAS,CAAEF,WAAY,EAAGE,SAAS,GACnC,SAAU,CAAEF,WAAY,EAAGE,SAAS,GACpC,SAAU,CAAEF,WAAY,EAAGE,SAAS,GACpCE,IAAK,CAAEJ,WAAY,EAAGE,SAAS,GAC/BG,IAAK,CAAEL,WAAY,EAAGE,SAAS,GAC/BlB,IAAK,CAAEiB,SAAU,EAAGC,SAAS,GAC7BjB,IAAK,CAAEgB,SAAU,EAAGC,SAAS,GAC7BnB,IAAK,CAAEiB,WAAY,EAAGE,SAAS,GAC/Bb,KAAM,CAAEW,WAAY,EAAGE,SAAS,GAChCZ,MAAO,CAAEW,SAAU,EAAGE,SAAU,EAAGD,SAAS,GAC5C1B,MAAO,CAAEwB,WAAY,EAAGE,SAAS,GACjCX,KAAM,CAAES,WAAY,EAAGE,SAAS,GAChCT,KAAM,CAAEO,WAAY,EAAGE,SAAS,GAChCP,KAAM,CAAEK,WAAY,EAAGE,SAAS,GAChCN,MAAO,CAAEI,WAAY,EAAGE,SAAS,GACjCI,IAAK,CAAEL,SAAU,GACjBM,GAAI,CAAEN,SAAU,GAChBO,IAAK,CAAER,WAAY,GACnB,IAAK,CAAEA,WAAY,EAAGE,SAAS,GAC/B,IAAK,CAAEF,WAAY,EAAGE,SAAS,GAC/B,IAAK,CAAEF,WAAY,EAAGE,SAAS,GAC/B,IAAK,CAAEF,WAAY,EAAGE,SAAS,GAC/B,KAAM,CAAEF,WAAY,EAAGE,SAAS,GAChC,KAAM,CAAEF,WAAY,EAAGE,SAAS,GAChC,MAAO,CAAEF,WAAY,EAAGE,SAAS,GACjC,OAAQ,CAAEF,WAAY,EAAGE,QAAS,UAAWH,QAAS,CAAC,SACvD,QAAS,CAAEC,WAAY,EAAGE,QAAS,UAAWH,QAAS,CAAC,SACxD,OAAQ,CAAEC,WAAY,EAAGE,QAAS,UAAWH,QAAS,CAAC,SACvD,OAAQ,CAAEC,WAAY,EAAGE,QAAS,UAAWH,QAAS,CAAC,SACvD,QAAS,CAAEC,WAAY,EAAGE,QAAS,UAAWH,QAAS,CAAC,SACxD,QAAS,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACpC,OAAQ,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACnC,QAAS,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACpC,OAAQ,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACnC,OAAQ,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACnC,QAAS,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACpC,OAAQ,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACnC,QAAS,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACpC,QAAS,CAAEC,WAAY,EAAGD,QAAS,CAAC,SACpCU,IAAK,CAAER,SAAU,EAAGC,SAAS,GAC7BhB,IAAK,CAAEc,WAAY,EAAGE,SAAS,GAC/Bf,IAAK,CAAEa,WAAY,EAAGE,SAAS,GAC/Bd,IAAK,CAAEY,WAAY,EAAGE,SAAS,GAC/BQ,IAAK,CAAEX,QAAS,CAAC,QACjBY,KAAM,CAAEZ,QAAS,CAAC,SAClB1E,IAAK,CAAE2E,WAAY,EAAGY,OAAQ,CAAC,CAAC,MAAO,MAAO,SAAUb,QAAS,CAAC,QAClE,SAAU,CACRC,WAAY,EACZY,OAAQ,CAAC,CAAC,MAAO,QACjBb,QAAS,CAAC,MAAO,SAEnB,SAAU,CAAEC,WAAY,EAAGY,OAAQ,CAAC,CAAC,MAAO,QAASb,QAAS,CAAC,QAC/D,OAAQ,CAAEC,WAAY,EAAGY,OAAQ,CAAC,MAAO,OAAQb,QAAS,CAAC,SAC3D/D,IAAK,CAAEiE,SAAU,EAAGE,SAAU,EAAGS,OAAQ,CAAC,CAAC,MAAO,QAASb,QAAS,CAAC,QACrEc,IAAK,CAAEZ,SAAU,EAAGF,QAAS,CAAC,QAC9Be,IAAK,CAAEb,SAAU,EAAGF,QAAS,CAAC,QAC9BgB,OAAQ,CAAEd,SAAU,EAAGE,SAAU,GACjCa,OAAQ,CACNf,SAAU,EACVW,OAAQ,CAAC,GAAI,CAAC,MAAO,OAAQ,QAC7Bb,QAAS,CAAC,QAEZkB,OAAQ,CACNhB,SAAU,EACVW,OAAQ,CAAC,GAAI,CAAC,MAAO,OAAQ,QAC7Bb,QAAS,CAAC,QAEZmB,KAAM,CAAEjB,SAAU,EAAGW,OAAQ,CAAC,GAAI,CAAC,MAAO,OAAQ,SAClDO,MAAO,CACLlB,SAAU,EACVW,OAAQ,CAAC,GAAI,CAAC,MAAO,OAAQ,QAC7Bb,QAAS,CAAC,QAEZqB,OAAQ,CAAEnB,SAAU,EAAGW,OAAQ,CAAC,GAAI,QACpC,KAAM,CAAEX,SAAU,GAClBzE,IAAK,CAAEuE,QAAS,CAAC,QACjBsB,KAAM,CAAElB,SAAU,EAAGD,SAAS,EAAMH,QAAS,CAAC,QAC9C,WAAY,CAAEI,SAAU,EAAGD,SAAS,EAAMH,QAAS,CAAC,QACpD,IAAK,CAAEE,SAAU,GACjB,KAAM,CAAEA,SAAU,GAClB,MAAO,CAAEA,SAAU,GACnBqB,KAAM,CACJtB,WAAY,EACZY,OAAQ,CACN,CAAC,MAAO,QACR,CAAC,MAAO,SAEVb,QAAS,CAAC,MAAO,SAEnB/C,KAAM,CACJiD,SAAU,EACVE,SAAU,EACVS,OAAQ,CAAC,CAAC,MAAO,SACjBb,QAAS,CAAC,MAAO,SAEnBwB,KAAM,CACJtB,SAAU,EACVE,SAAU,EACVS,OAAQ,CAAC,CAAC,MAAO,OAAQ,MAAO,OAChCb,QAAS,CAAC,MAAO,QAEnB1C,QAAS,CAAE2C,WAAY,EAAGY,OAAQ,CAAC,CAAC,MAAO,QAASb,QAAS,CAAC,MAAO,QACrE3C,KAAM,CACJ6C,SAAU,EACVE,SAAU,EACVS,OAAQ,CAAC,CAAC,MAAO,OAAQ,QACzBb,QAAS,CAAC,QAEZrB,KAAM,CAAEsB,WAAY,EAAGY,OAAQ,CAAC,SAChCY,KAAM,CAAExB,WAAY,EAAGY,OAAQ,CAAC,SAChCa,GAAI,CAAExB,SAAU,GAChByB,IAAK,CAAEzB,SAAU,GACjBxB,MAAO,CAAEwB,SAAU,EAAGE,SAAU,EAAGD,QAAS,UAAWH,QAAS,CAAC,QACjE,SAAU,CACRC,WAAY,EACZY,OAAQ,CAAC,CAAC,MAAO,MAAO,SACxBb,QAAS,CAAC,SAEZ4B,MAAO,CAAE1B,SAAU,EAAGE,SAAU,EAAGS,OAAQ,CAAC,MAAO,OAAQb,QAAS,CAAC,QACrE6B,KAAM,CACJ5B,WAAY,EACZY,OAAQ,CAAC,MAAO,CAAC,MAAO,OAAQ,QAChCb,QAAS,CAAC,QAEZ,eAAgB,CAAEC,WAAY,EAAGY,OAAQ,CAAC,MAAO,OAAQb,QAAS,CAAC,SACnE,aAAc,CAAEC,WAAY,EAAGY,OAAQ,CAAC,MAAO,OAAQb,QAAS,CAAC,SACjE,aAAc,CAAEC,WAAY,EAAGY,OAAQ,CAAC,OAAQb,QAAS,CAAC,QAC1D,aAAc,CAAEC,WAAY,EAAGY,OAAQ,CAAC,OAAQb,QAAS,CAAC,QAC1DrC,KAAM,CAAEsC,WAAY,EAAGY,OAAQ,CAAC,OAAQb,QAAS,CAAC,QAClD,aAAc,CAAEC,WAAY,EAAGY,OAAQ,CAAC,OAAQb,QAAS,CAAC,QAC1D,WAAY,CAAEC,WAAY,EAAGY,OAAQ,CAAC,OAAQb,QAAS,CAAC,QACxD,OAAQ,CAAEC,WAAY,EAAGY,OAAQ,CAAC,MAAO,OAAQb,QAAS,CAAC,QAC3D,YAAa,CACXE,SAAU,EACVE,SAAU,EACVS,OAAQ,CAAC,CAAC,MAAO,OAAQ,OACzBb,QAAS,CAAC,MAAO,MAAO,SAE1B8B,KAAM,CAAE7B,WAAY,EAAGD,QAAS,CAAC,QACjC+B,QAAS,CAAE9B,WAAY,EAAGD,QAAS,CAAC,QACpCgC,MAAO,CAAE9B,SAAU,EAAGE,SAAU,EAAGS,OAAQ,CAAC,QAASb,QAAS,CAAC,QAC/DiC,QAAS,CAAEhC,WAAY,EAAGD,QAAS,CAAC,QACpCkC,KAAM,CAAEjC,WAAY,EAAGY,OAAQ,CAAC,QAChCsB,MAAO,CAAElC,WAAY,GACrBmC,MAAO,IAGIC,EAAY,CACvBC,KAAM,OACN7G,IAAK,SACLyC,IAAK,SACLqE,KAAM,UACNxI,IAAK,UACLyI,IAAK,YACL7B,IAAK,SACLC,KAAM,aACN6B,KAAM,WACNC,IAAK,UACLC,KAAM,YC1RKC,EAASjB,GACV,SAAVA,EAAIkB,EAAelB,EAAImB,EAAc,SAAVnB,EAAIkB,EAE1B,SAASE,EAAWC,EAAYC,EAAcC,GACnD,MAAM,WAAEjD,EAAU,SAAEG,EAAQ,SAAEF,GAAaJ,EAAIkD,GACzCG,EAAO,CAACC,EAAaC,IAAmB,CAC/B,CACXC,EAAG,QACHC,EAAG,GAAGP,WAAYI,aAA0B,IAAXC,EAAe,IAAM,WAAWJ,IACjEC,OAAAA,IAGJ,QAAmB,IAAfjD,GACF,GAAIgD,IAAShD,EACX,OAAOkD,EAAK,WAAWlD,IAAcA,OAElC,CACL,GAAIC,IAAaE,GAAY6C,EAAO/C,EAClC,OAAOiD,EAAK,YAAYjD,IAAYA,GAAA,IAC1BA,GAAYE,GAAY6C,EAAO7C,EACzC,OAAO+C,EAAK,WAAW/C,IAAYA,GAAA,GAC1BF,GAAYE,IAAa6C,EAAO/C,GAAY+C,EAAO7C,GAC5D,OAAO+C,EAAK,WAAWjD,SAAgBE,IAAYA,IAKlD,SAASoD,EACdR,EACAS,EACAP,EACAQ,GAAa,GAEb,MAAQ7C,OAAQ8C,EAAOxD,QAASyD,GAAY9D,EAAIkD,GAC1CC,EAAO3H,EAAImI,GACjB,GAAIG,EAAS,CACX,MAAMC,EAAeJ,EAAKK,WACxB/G,KACIzB,EAAIyB,KAAO2G,GAAc3G,EAAEoE,MAAK0B,GAAW,QAANA,IAAwB,QAAT9F,EAAE,MAE5D,IAAsB,IAAlB8G,EACF,OAEF,MAAME,EAAQN,EAAKI,GAAe/C,KAAI+B,GAAKR,EAAUQ,KAAIhB,KAAK,MAC9D,MAAO,CACLmC,GAAQ,GAAGhB,uCAAwCe,IAASb,IAGhE,IAAKS,EACH,OAEF,MAAMM,EAAiBN,EACpB7C,KAAI,CAACoD,EAAMC,KACV,GAAIA,GAAKlB,IAASQ,EAAKU,GACrB,OAAO,EAET,MAAMC,EAAWX,EAAKU,GACtB,GAAIvI,EAAQsI,GAAO,CACjB,IACG5I,EAAI4I,KACJR,GACIpI,EAAI8I,IAAaA,EAASC,MAAKxB,GAAKtG,EAAI2H,EAAMrB,KAC7B,IAAlBvH,EAAI8I,IAAmB7H,EAAI2H,EAAME,EAAS,KAE9C,OAAO,EAET,MAAML,EAAQK,EAAStD,KAAI+B,GAAKR,EAAUQ,KAE1C,MAAO,YAAYsB,EAAI,qBADTD,EAAKpD,KAAI+B,GAAKR,EAAUQ,KAAIhB,KAAK,cACWkC,IACrD,CACL,GACEL,GACKpI,EAAI8I,IAAa7H,EAAI6H,EAAUF,GACd,IAAlB5I,EAAI8I,IAAmBF,IAASE,EAAS,GAE7C,OAAO,EAET,MAAML,EAAQK,EAAStD,KAAI+B,GAAKR,EAAUQ,KAC1C,MAAO,YAAYsB,EAAI,aAAa9B,EAAU6B,WAAcH,QAG/D9C,QAAOqD,KAAOA,IACjB,OAAOhJ,EAAI2I,GACPA,EAAenD,KAAIgC,GAAKkB,GAAgBlB,EAAGI,UAC3C,EAGC,MAAMc,GAAU,CAACT,EAAWL,KAAiC,CAClEI,EAAG,OACHC,EAAAA,EACAL,OAAAA,IAGK,SAASqB,GAASrB,EAAgBS,GACvC,MAAMI,EAAQJ,EAAM7C,KAAI+B,GAAKR,EAAUQ,KAAIhB,KAAK,MAChD,MAAO,CACLmC,GACE,2EAA2ED,IAC3Eb,IAKC,SAASsB,GAAStB,EAAgBS,GACvC,MAAMI,EAAQJ,EAAM7C,KAAI+B,GAAKR,EAAUQ,KAAIhB,KAAK,MAChD,MAAO,CACLmC,GACE,mEAAmED,IACnEb,IC7GN,MAAQpG,OAAM,GAAEP,IAAG,GAAEM,KAAI,GAAEI,KAAI,GAAEjC,MAAK,GAAEI,OAAM,IAAK,GAC3CI,KAAI,GAAEiB,OAAM,GAAEP,IAAG,GAAEJ,OAAM,GAAEE,OAAM,IAAK,GACtCN,MAAK,GAAEJ,IAAG,GAAET,MAAK,IAAK,EAexB4J,GAAe,CAAE5B,EAAG,OAAQC,OAAG,GAC/B4B,GAAgB,CAAE7B,EAAG,OAAQC,GAAG,GAEhC6B,GAAc,EAAGC,IAAAA,KAAiB,GAAc,MAARA,GAAe,GAAc,MAARA,GAyKnE,SAASC,GAASC,EAAiBjE,GACjC,MAAM4C,EAAsB,GAC5B,OAAa,CACX,MAAMsB,EAAMC,GAASF,EAAQjE,GAC7B,IAAK,GAAIkE,GACP,MAEFtB,EAAKxG,KAAK8H,GAEZ,OAAOtB,EAgQT,SAASuB,GACPF,EACAjE,EACAoE,GAAY,GAEZ,IAAK,GAAIH,GACP,MAAO,GAET,MAAM,IAAEF,EAAG,KAAEM,EAAI,OAAEhC,GAAW4B,EAAOK,QAE/BC,EACI,QAARR,GAAiB,GAAI,KAAMM,IAAS,GAAIJ,IAA6B,MAAlBA,EAAO,GAAGF,IACzDS,EAAyB,MAART,GAAe,GAAIE,IAA8B,OAAnBA,EAAO,GAAGI,KAC/D,GAAIE,GAAaC,EAAgB,CAC/B,MAAMC,EAAQR,EAAOhE,KAAI+B,GAAKA,EAAEqC,OAC1BK,EAAQF,EAAiBP,EAAOK,aAAU,EAC1CK,EAAmB,GACzB,GAAIH,EAAgB,CAClB,MAAMI,EAAeC,GAAYZ,GAGjC,GAFAjE,EAAS4E,EAAa5E,OACtB,GAAK2E,EAAKC,EAAaE,QACD,MAAlBb,EAAO,GAAGF,IACZ,MAAO,CACL,CAAEA,IAAK,MAAOhK,MAAO,qBAAsBsI,OAAQqC,EAAOrC,SAG9D4B,EAAOc,QAAQ,CAAEhB,IAAK,MAAOM,KAAM,KAAMhC,OAAAA,IACzC4B,EAAOc,QAAQ,CAAEhB,IAAK,IAAKM,KAAM,IAAKhC,OAAAA,IAExC,GAAKsC,EAAKR,GAASF,EAAQjE,EAAiB,MAATqE,IACnC,MAAMS,EAASH,EAAIvE,QAAO4B,GAAe,QAAVA,EAAE+B,MACjC,GAAI,GAAIe,GACN,OAAOA,EAELN,GACFG,EAAIK,SAAQ1B,IACI,QAAVA,EAAES,MACJT,EAAES,IAAM,UAId,MAAMhK,EAAyB,EAC5ByK,EAAiB,IAAMH,GACtB,GAAMI,EAAO,EAAG,GAAIA,GAAS,GAAIR,IAASjD,KAAK,KAC1C2D,GAET,MAAO,CAAC,CAAEZ,IAAc,MAATM,EAAe,MAAQ,MAAOtK,MAAAA,EAAOsI,OAAAA,IAEtD,OAAQ0B,GAAA,IACD,MACH,MAAO,CAAC,CAAEA,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,MAAOC,EAAGoC,GAAQhC,OAAAA,IAAA,IACtD,MACH,MAAO,CAAC,CAAE0B,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,MAAOC,EAAG,GAAMoC,IAAShC,OAAAA,IAAA,IAC7D,MACH,GAAa,SAATgC,GAA4B,UAATA,EACrB,MAAO,CACL,CAAEN,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,OAAQC,EAAY,SAAToC,GAAmBhC,OAAAA,IAAA,GAE7C,SAATgC,EACT,MAAO,CAAC,CAAEN,IAAK,MAAOhK,MAAO6J,GAASvB,OAAAA,IAAA,GACpB,MAATgC,EACT,MAAO,CAAC,CAAEN,IAAK,MAAOhK,MAAO,CAAEiI,EAAG,OAAQC,OAAG,GAAaI,OAAAA,IAAA,GACjD,GAAOgC,EAAM,KACtB,MAAO,CAAC,CAAEN,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,MAAOC,EAAGoC,GAAQhC,OAAAA,IAAA,GAChD,GAAOgC,EAAM,MAAQ,GAAM,GAAOA,EAAM,IAAK,CACtD,MAAMtK,EAAQ,GAAM,GAAOsK,EAAM,IACjC,OAAItK,EAAQ,EACH,CAAC,CAAEgK,IAAK,MAAOhK,MAAO6J,GAASvB,OAAAA,IAEjC,CAAC,CAAE0B,IAAK,MAAOhK,MAAAA,EAAOsI,OAAAA,IAAA,GAE7B,GACErC,EAAOC,KAAI,EAAGgF,KAAAA,KAAWA,IACzBZ,GAEF,CACA,MAAMa,EAAQlF,EAAOM,MAAK,EAAG2E,KAAAA,KAAWA,IAASZ,IACjD,OAA4B,IAAxB,GAAIa,EAAMC,UACL,CAAC,CAAEpB,IAAK,MAAOhK,MAAOmL,EAAMC,SAAS,GAAI9C,OAAAA,IAE3C,CAAC,CAAE0B,IAAK,MAAOhK,MAAOmL,EAAMC,SAAU9C,OAAAA,IAAA,MAC3B,SAATgC,EACF,CAAC,CAAEN,IAAK,MAAOhK,OAAQ,EAAGsI,OAAAA,IACf,OAATgC,GAA0B,MAATA,EAEnB,CAAC,CAAEN,IAAK,MAAOhK,MAAO,CAAEiI,EAAG,MAAOC,EADtB,OAAToC,EAAgB,kBAAoB,mBACAhC,OAAAA,IACrCpD,EAAIoF,GACN,CAAC,CAAEN,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,OAAQC,EAAGoC,GAAQhC,OAAAA,IAErD,CAAC,CAAE0B,IAAK,MAAOhK,MAAOsK,EAAMhC,OAAAA,IAAA,IAChC,IACH,OAxVN,SACE4B,EACAjE,EACAoE,GAAY,GAEZ,MAAMgB,EAAOnB,EAAOK,QACpB,IAAKc,EACH,MAAO,GAET,MAAM,IAAErB,EAAG,KAAEM,EAAI,OAAEhC,GAAW+C,EAC9B,IAAIjD,EAAKkC,EACT,MAAMgB,EAAM,CAACtL,EAAeuL,EAAOjD,IAAW,CACjC,CAAE0B,IAAK,MAAOhK,MAAAA,EAAOsI,OAAQiD,IAE1C,GAAW,UAAPnD,EAAgB,CAClB,GAAsB,MAAlB8B,EAAO,GAAGF,IACZ,OAAOsB,EAAI,iCAEb,MAAM,EAAOlB,GAASF,EAAQjE,GACxBuF,EAAO,GAAKvB,GAASC,EAAQjE,IACnC,OAAK,GAAI,IAAU,GAAIuF,GAGhB,IAAI,EAAM,CAAExB,IAAK,MAAOhK,MAAO,GAAIwL,GAAOlD,OAAAA,MAAakD,GAFrDF,EAAI,qCAEiD,GAC9C,QAAPlD,GAAuB,QAAPA,EAAc,CACvC,MAAMwC,EAAa,GACnB,OAAa,CACX,MAAMa,EAAsBX,GAAYZ,GAAQ,GAChD,GAAI,GAAIuB,EAAoBV,QAC1B,OAAOU,EAAoBV,OAE7B,IAAIW,EAWJ,GAVI,GAAID,EAAoBxF,UAC1ByF,EAAM,CACJ1B,IAAY,QAAP5B,EAAe,MAAQ,MAC5BpI,MAAOyL,EAAoBxF,OAC3BqC,OAAAA,IAGCoD,KACFA,GAAOtB,GAASF,EAAQjE,IAEvB,GAAI2E,KAASc,EACf,OAAOd,EAET,MAAM7D,EAAMqD,GAASF,EAAQjE,GAC7B,KAAK,GAAI2E,IAAUc,GAAQ,GAAI3E,IAC7B,OAAOuE,EAAI,4DACD,GAAIvE,GACd,OAAOuE,EAAI,oDAEb,GAAgB,QAAZI,EAAI1B,KAA6B,QAAZ0B,EAAI1B,KAA6B,QAAZ0B,EAAI1B,IAChD,MAAO,CACM,CACTA,IAAK,MACLhK,MAAO,GAAGoI,sCACVE,OAAQoD,EAAIpD,SAIlB,GAAKsC,EAAK7D,GACM,QAAZ2E,EAAI1B,IACNY,EAAIvI,KAAK,CAAE2H,IAAK5B,EAAIpI,MAAO0L,EAAI1L,MAAOsI,OAAAA,IACjB,QAAZoD,EAAI1B,KAA6B,QAAZ0B,EAAI1B,KAClCY,EAAIvI,KAAK,CAAE2H,IAAK0B,EAAI1B,IAAKhK,MAAO0L,EAAI1L,MAAOsI,OAAAA,SAAA,IAG/B,SAAPF,GAAwB,SAAPA,EAAe,CACzC,MAAMwC,EAAa,GAEbe,EAASvB,GAASF,EAAQjE,GAChC,IAAK,GAAI0F,GACP,OAAOL,EAAI,iCAEb,MAAMI,EAAMC,EAAO,GACnB,GAAgB,QAAZD,EAAI1B,IACN,OAAOsB,EAAI,mCAEb,MAAMzD,EAAOuC,GAASF,EAAQjE,GAC9B,IAAK,GAAI4B,GACP,OAAOyD,EAAI,6BAEb,MAAMzC,EAAOoB,GAASC,EAAQjE,GAM9B,OALA2E,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO0L,EAAI1L,MAAOsI,OAAAA,IACzC,GAAKsC,EAAK,GAAK/B,IACf,GAAK+B,EAAK/C,GACV+C,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,GAAI6I,GAAQ,EAAGP,OAAAA,IAC7CsC,EAAIvI,KAAK,CAAE2H,IAAY,SAAP5B,EAAgB,MAAQ,MAAOpI,MAAO0L,EAAI1L,MAAOsI,OAAAA,IAC1DsC,EAAA,GACS,OAAPxC,GAAsB,QAAPA,GAAuB,SAAPA,EAAe,CACvD,MAAMwD,EAAOxB,GAASF,EAAQjE,GAC9B,IAAK,GAAI2F,GACP,OAAON,EAAI,0BAEb,MAAMV,EAAmBgB,EAKzB,GAJW,QAAPxD,IACFwC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,CAAEiI,EAAG,OAAQC,EAAG,KAAOI,OAAAA,IACrDsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,EAAGsI,OAAAA,KAExB,OAAPF,GAAsB,QAAPA,EAAc,CAC/B,MAAMyD,EAAMzB,GAASF,EAAQjE,GAC7B,IAAK,GAAI4F,GACP,OAAOP,EAAI,yBAEbV,EAAIvI,KAAK,CAAE2H,IAAK,KAAMhK,MAAO,GAAI6L,GAAO,EAAGvD,OAAAA,IAC3C,GAAKsC,EAAKiB,GACV,MAAMC,EAAM1B,GAASF,EAAQjE,GAC7B,GAAI,GAAI6F,GAAM,CACZlB,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,GAAI8L,GAAMxD,OAAAA,IACxC,GAAKsC,EAAKkB,GACV,MAAMC,EAAmB3B,GAASF,EAAQjE,GAC1C,GAAI,GAAI8F,GACN,OAAOT,EACL,wCACAS,EAAiB,GAAGzD,aAIxBsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,EAAGsI,OAAAA,IACjCsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO6J,GAASvB,OAAAA,QAEpC,CACL,MAAM,EAAO,GAAK2B,GAASC,EAAQjE,IACnC2E,EAAIvI,KAAK,CAAE2H,IAAK,KAAMhK,MAAO,GAAI,GAAQ,EAAGsI,OAAAA,IAC5C,GAAKsC,EAAK,GACVA,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,EAAGsI,OAAAA,IACjCsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO6J,GAASvB,OAAAA,IAEzC,OAAOsC,EAAA,GACS,QAAPxC,GAAuB,OAAPA,GAAsB,UAAPA,EAAgB,CACxD,MAAMS,EAAOoB,GAASC,EAAQjE,GAC9B,IAAI+F,EAAWnD,EAAKzC,QAAO,CAAC6F,EAAK9J,IAAM8J,EAAM,GAAI9J,IAAI,GACrD,GAAI,GAAI0G,GAAQ,EACd,OAAOyC,EAAI,mCAEb,MAAMV,EAAa,GACnB,GAAW,UAAPxC,EAAgB,CAClBwC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO6J,GAASvB,OAAAA,IACvC0D,GAAY,EACZ,MAAM,EAAOnD,EAAK0B,QAMlB,OALA,GAAKK,EAAK,GACVA,EAAIvI,KAAK,CAAE2H,IAAK,KAAMhK,MAAOgM,EAAW,GAAI,GAAO1D,OAAAA,IACnDsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,GAAI6I,GAAOP,OAAAA,IACzCO,EAAKoC,SAAQiB,GAAM,GAAKtB,EAAKsB,KAC7BtB,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,QAASgM,EAAW,GAAI1D,OAAAA,IACxCsC,EAEToB,GAAY,GAAInD,GAChBmD,GAAY,GAAa,QAAP5D,GAClB,MAAM,EAAa,QAAPA,EAAe,KAAO,KAClC,QAASjG,EAAI,EAAGA,EAAI,GAAI0G,KAAS1G,EAC/B,GAAKyI,EAAK/B,EAAK1G,IACf6J,GAAY,GAAInD,EAAK1G,IACrByI,EAAIvI,KAAK,CAAE2H,IAAA,EAAKhK,MAAOgM,EAAU1D,OAAAA,MAC/B0D,EAWJ,MATW,QAAP5D,EACF,GAAKwC,EAAK,CACR,CAAEZ,IAAK,MAAOhK,MAAY,CAAEiI,EAAG,OAAQC,GAAG,GAAQI,OAAAA,GAClD,CAAE0B,IAAK,MAAOhK,MAAO,EAAGsI,OAAAA,GACxB,CAAE0B,IAAK,MAAOhK,MAAO8J,GAAUxB,OAAAA,KAGjCsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO8J,GAAUxB,OAAAA,IAEnCsC,EAAA,GACS,UAAPxC,EAAgB,CACzB,MAAMwD,EAAOxB,GAASF,EAAQjE,GAC9B,IAAK,GAAI2F,GACP,OAAON,EAAI,0BAEb,MAAMzC,EAAOoB,GAASC,EAAQjE,GACxBkG,EAAyB,GAAItD,GAAQ,EAAIA,EAAKuD,MAAS,GAC7D,IAAK,GAAIvD,GACP,OAAOyC,EAAI,kCAEb,IAAIU,EACFnD,EAAKzC,QACH,CAAC6F,EAAK9J,IAAM8J,EAAM,GAAI9J,GAAK,GAC3B,GAAIgK,GAAa,GAAIA,GAAa,EAAI,GACpC,EACN,MAAMvB,EAAmBgB,EACzB,KAAO,GAAI/C,GAAQ,GAAG,CACpB,MAAM1G,EAAI0G,EAAK0B,QACTiB,EAAO3C,EAAK0B,QAClB,GAAKK,EAAKzI,GACVyI,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,GAAIwL,GAAQ,EAAGlD,OAAAA,IAC7C,GAAKsC,EAAKY,GACVQ,GAAY,GAAI7J,GAAK,GAAIqJ,GAAQ,EACjCZ,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAOgM,EAAU1D,OAAAA,IAQ1C,OANI,GAAI6D,GACN,GAAKvB,EAAKuB,IAEVvB,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,EAAGsI,OAAAA,IACjCsC,EAAIvI,KAAK,CAAE2H,IAAK,MAAOhK,MAAO8J,GAAUxB,OAAAA,KAEnCsC,GAET,MAAMyB,EAAiB,GAEvB,GACU,MAARrC,GACA,GACE/D,EAAOC,KAAI,EAAGgF,KAAAA,KAAWA,IACzBZ,IAEF,GAAI,MAAO,GAAOA,EAAM,IACxB,CACAJ,EAAOc,QAAQK,GACf,MAAMT,EAAMR,GAASF,EAAQjE,GACzBoE,GACFgC,EAAQhK,KAAK,CAAE2H,IAAK,MAAOhK,MAAO,GAAI4K,GAAMtC,OAAAA,IAE9C,GAAK+D,EAASzB,GAEhB,MAAM0B,EAAarC,GAASC,EAAQjE,IAC7BsG,EAAMC,GAAS,CAAC,GAAKF,GAAa,GAAIA,IAC7C,GAAW,WAAPlE,EACF,MAAO,IAAImE,EAAM,CAAEvC,IAAK,MAAOhK,QAAS,GAAIuM,GAAOjE,OAAAA,IAIrD,GAAIpD,EAAIkD,KAAQiC,EAAW,CACzB,MAAMU,EAAS5C,EAAWC,EAAIoE,EAAOlE,GACrC,GAAK+D,EAAStB,GAAQ7E,KAAIwC,GAAK4C,EAAI5C,EAAEC,GAAG,MAAO,IAC1CoC,GAEW,IAAVyB,GAAetH,EAAI,OAAOkD,OAC5BA,EAAK,OAAOA,KAKlB,GAAI,GAAIiE,GACNA,EAAQhK,KAAK,CAAE2H,IAAK,MAAOhK,MAAOwM,EAAOlE,OAAAA,QACpC,CACL,MAAMtI,EACI,QAARgK,EACI,CAAE/B,EAAG,MAAOC,EAAG,GAAME,IACrB,GAAOA,EAAI,KACX,CAAEH,EAAG,MAAOC,EAAGE,GACflD,EAAIkD,GACJ,CAAEH,EAAG,OAAQC,EAAGE,GACT,SAAPA,GAAwB,UAAPA,EACjB,CAAEH,EAAG,OAAQC,EAAU,SAAPE,GAChB,CAAEH,EAAG,MAAOC,EAAGE,GACrBiE,EAAQhK,KAAK,CAAE2H,IAAK,MAAOhK,MAAAA,EAAOsI,OAAAA,IAClC+D,EAAQhK,KAAK,CAAE2H,IAAK,MAAOhK,MAAOwM,EAAOlE,OAAAA,IAE3C,MAAO,IAAIiE,KAASF,GA8FTI,CAAUvC,EAAQjE,EAAQoE,GAAA,IAC9B,QACA,MACH,MAAO,WAEP,OFxQwD,GEqR9D,SAASS,GACPZ,EACAwC,GAAS,GAET,IAAK,GAAIxC,IAA6B,MAAlBA,EAAO,GAAGF,IAC5B,MAAO,CAAE/D,OAAQ,GAAI8E,OAAQ,IAE/B,IAAI4B,EAAQ,EACZ,MAAMC,EAAuB,GAC7B,IAAIC,EAAoB,GACpBC,EAAc,EAClB,KAAO,GAAI5C,KACJyC,IACHC,EAAUvK,KAAK,IACfwK,EAAWD,EAAU,GAAIA,GAAa,IAExCD,GAAS5C,GAAYG,EAAO,MACxByC,EAAQ,KANM,CAUlB,GADAE,EAASxK,KAAK6H,EAAOK,SACG,QAApBsC,EAAS,GAAG7C,KAAiB,GAAI,MAAO6C,EAAS,GAAGvC,MAAO,CAC7DJ,EAAOc,QAAQ6B,EAAS,IACxBD,EAAUR,MACVU,EAAc,EACd,MAEF,GACE,GAAID,GAAY,IACK,QAApBA,EAAS,GAAG7C,KAAsC,QAArB6C,EAAS,GAAGvC,MAC1C,CACAwC,EAAc,EACd,MAEF,GAAIJ,IAAWC,EAAO,CACpB,GAAsB,IAAlB,GAAIE,GAEN,OADA3C,EAAOc,QAAQ6B,EAAS,IACjB,CAAE5G,OAAQ,GAAI8E,OAAQ,IAE/B,OAGJ,GAAoB,IAAhB+B,GAAqBH,EAAQ,EAC/BzC,EAAOc,QAAQ6B,EAAS,IACxB3C,EAAOc,QAAQ6B,EAAS,IACxBD,EAAUR,WAEV,GAAIO,EAAQ,EAEVC,EAAUR,MACVQ,EACGR,MACA1J,UACAuI,SAAQhD,GAAKiC,EAAOc,QAAQ/C,UAAA,IACrB6E,IAAgBJ,EAAQ,CAElC,MAAMK,EAAOH,EAAUR,MACL,IAAd,GAAIW,IAA+B,MAAhBA,EAAK,GAAG/C,KAC7B,GAAKE,EAAQ0C,EAAUR,OAEzB,GAAKlC,EAAQ6C,GAGjB,MAAM9G,EAAsB,GACtB8E,EAAsB,GACtBK,EAAqB,CAAC,GA0B5B,OAzBAwB,EAAU3B,SAAQ,IAChB,EAASA,SAAQ,EAAGjB,IAAAA,EAAKM,KAAAA,EAAMhC,OAAAA,MAC7B,GAAY,QAAR0B,EAAe,CACjB,GAAa,QAATM,EACF,OAIF,OAFArE,EAAO5D,KAAK,CAAE6I,KAAMZ,EAAMc,SAAU,GAAMA,WACxCA,EAAS,GAAIA,GAAY,GAGjB,MAARpB,EACFoB,EAAS/I,KAAK,GACG,MAAR2H,GACToB,EAASgB,QACPhB,EAAS,GAAIA,GAAY,IAE3BL,EAAO1I,KAAK,CACV2H,IAAK,MACLhK,MAAO,8BACPsI,OAAAA,UAMD,CAAErC,OAAAA,EAAQ8E,OAAAA,GAiGnB,SAASiC,GAAeC,GAKtB,MAAMC,EAAoB,GAC1B,QAAS3D,EAAI,EAAG4D,EAAM,GAAIF,GAAO1D,EAAI4D,IAAO5D,EAAG,CAC7C,MAAMqB,EAAMqC,EAAK1D,GACjB,OAAQqB,EAAIZ,KAAA,IACL,MACHkD,EAAM7K,KAAK,CAAE0G,MAAO,CAAC6B,EAAI5K,MAAMiI,GAAIlB,IAAK6D,EAAI5K,QAC5C,UACG,MAAO,CACV,MAAMqL,EAAO6B,EAAMd,MACbvD,EAAO,GAAOqE,EAAO,GAAIA,GAAStC,EAAI5K,MAAO4K,EAAI5K,OACjDoN,EAAYC,GAChBxE,EAAKK,WACH,EAAGH,MAAAA,KAAYA,IAAUsE,EAAQ9G,MAAK0B,GAAK,GAAIc,EAAOd,OAEpDqF,EAAUrF,GACdoD,EAAKtE,IACDsE,EAAKtE,IAAIkB,IAAMA,EACfoD,EAAKtC,OAA6B,IAApB,GAAIsC,EAAKtC,QAAgBsC,EAAKtC,MAAM,KAAOd,EAC/D,GAAIoD,EAAKtE,KAAsB,SAAfsE,EAAKtE,IAAIkB,EAAc,CACrC,GAAmB,UAAfoD,EAAKtE,IAAImB,EAAe,CAC1B,GAAOgF,EAAO,GAAIA,GAAStC,EAAI5K,MAAO4K,EAAI5K,OAC1C,MAEF,MAAM+K,EAASnC,EACbyC,EAAKtE,IAAImB,EACTW,EAAK3C,KAAI/D,GAAKA,EAAE4G,OAAS,KACzB6B,EAAItC,QACJ,GAEF,GAAIyC,EACF,OAAOA,EAET,MAAM,QAAE3F,EAASG,QAASyD,GAAY9D,EAAImG,EAAKtE,IAAImB,GACnDgF,EAAM7K,KACJ2G,GAAuB,YAAZA,EACP,CAAED,MAAO,CAAC,QACV,CAAEA,MAAO3D,SAAA,GAENkI,EAAO,OAAQ,CACxB,MAAMC,EAASH,EAAS,CAAC,MAAO,OAAQ,QACxC,IAAgB,IAAZG,EACF,OAAO5D,GAASiB,EAAItC,OAAQO,EAAK0E,GAAQxE,OAE3CmE,EAAM7K,KAAK,YACFiL,EAAO,OAAQ,CACxB,MAAMC,EAASH,EAAS,CAAC,OAAQ,QACjC,IAAgB,IAAZG,EACF,OAAO3D,GAASgB,EAAItC,OAAQO,EAAK0E,GAAQxE,OAE3CmE,EAAM7K,KAAK,SACFiL,EAAO,QAAUA,EAAO,QACjCJ,EAAM7K,KAAK,IACDgJ,EAAKtC,OAAUsC,EAAKtE,KAC9BmG,EAAM7K,KAAK,IAEb,UAEG,KACH6K,EAAMd,MACNc,EAAM7K,KAAK,IACXkH,GAAKqB,EAAI5K,MACT,UACG,UACA,UACA,UACA,UACA,UACA,UACA,UACA,MACH,UACG,UACA,MAAO,CACV,MAAM+K,EAASiC,GAAepC,EAAI5K,MAAM,IACxC,GAAI+K,EACF,OAAOA,EAAA,IAGN,UACA,UACA,UACA,MACHmC,EAAM7K,KAAK,IACX,UACG,KAAM,CACT6K,EAAMd,MACNc,EAAM7K,KAAK,IACX,MACM0I,EAASiC,GADD,GAAMC,EAAM1D,EAAI,EAAGqB,EAAI5K,MAAQ,IAE7C,GAAI+K,EACF,OAAOA,EAETxB,GAAKqB,EAAI5K,MAAQ,EACjB,UAEG,MACHkN,EAAMd,MACNc,EAAMd,MACN7C,GAAKqB,EAAI5K,MACTuJ,GAAK0D,EAAK1D,GAAGvJ,MACbkN,EAAM7K,KAAK,IACX,UAEG,MACH,GAAO6K,EAAO,GAAIA,GAAStC,EAAI5K,MAAO4K,EAAI5K,OAC1C,UACG,MACC4K,EAAI5K,OACNkN,EAAMd,QAST,SAASoB,GACdC,EACAC,GAEA,MAAM,OAAExD,EAAM,YAAEyD,GAv1BX,SACLF,EACAC,EACAE,GAAe,EACfC,GAAe,GAEf,MAAM3D,EAAkB,GAExB,IAAI4D,GAAW,EACbC,GAAY,EACZC,EAAa,CAAC,EAAG,GACjBC,GAAW,EACXC,GAAW,EACXC,GAAQ,EACRC,GAAY,EACZC,EAAO,EACPC,EAAM,EACR,QAAS/E,EAAI,EAAGgF,EAAI,GAAKd,GAAOlE,EAAIgF,IAAKhF,EAAG,CAC1C,MAAMiF,EAAI,GAAOf,EAAMlE,GACrBkF,EAASlF,EAAI,IAAMgF,EAAI,GAAOd,EAAMlE,EAAI,GAAK,GAE/C,KADE+E,EACEF,EAAW,CACH,OAANI,GACFJ,GAAY,IACVC,EACFC,EAAM,GACGT,IACT3D,EAAO,GAAIA,GAAU,GAAGI,MAAQkE,GAElC,SAEF,GAAIT,EAAW,CACbA,GAAY,EACRD,IACF5D,EAAO,GAAIA,GAAU,GAAGI,MACtB,CAAEoE,EAAG,KAAMzG,EAAG,KAAMyB,EAAG,KAAM,IAAK,KAAM8E,IAAM,KAAKA,KAEvD,SAEF,GAAU,OAANA,EAAY,CACdT,GAAY,EACZ,SAEF,GAAU,MAANS,EAAW,EACRV,GAAYA,KACfE,EAAa,CAACK,EAAMC,GACpBpE,EAAO7H,KAAK,CACV2H,IAAK,MACLM,KAAM,GACNhC,OAAQ,CAAEoF,SAAAA,EAAoBW,KAAAA,EAAMC,IAAAA,MAGxCJ,EAAWD,GAAW,EACtB,SAEF,MAAMU,EAAU,GAAI,WAAYH,GAChC,IAAKV,GAAYa,EAAS,CACxBT,EAAWD,GAAW,EACZ,OAANO,MACAH,EACFC,EAAM,GAER,SAEF,IAAKR,GAAkB,MAANU,EAAW,CAC1BJ,GAAY,EACRP,GACF3D,EAAO7H,KAAK,CACV2H,IAAK,MACLM,KAAM,GACNhC,OAAQ,CAAEoF,SAAAA,EAAoBW,KAAAA,EAAMC,IAAAA,KAGxC,SAEF,MAAMhG,EAAiB,CAAEoF,SAAAA,EAAoBW,KAAAA,EAAMC,IAAAA,GAC7CM,EAAWC,GAAe,GArEnB,aAqE+BA,GACtCC,EAAU,GAAI,SAAUN,GAE9B,GAAIN,IAAaU,EAAQJ,GAAI,CAC3B,MAAMO,EAAiB,MAANP,GAA8C,MAAjCtE,EAAO,GAAIA,GAAU,GAAGI,KACtD6D,EAAQA,GAASY,EACjBb,EACS,MAANM,GAA8C,MAAjCtE,EAAO,GAAIA,GAAU,GAAGI,MAC/B,MAANkE,IAAc,GAAItE,EAAO,GAAIA,GAAU,GAAGI,KAAM,MAChD6D,IAAUY,GAAY,GAAI,eAAgBP,IACxCN,GAAaY,GAAYH,IAC5BV,GAAW,EACX/D,EAAO,GAAIA,GAAU,GAAGF,IAAM,OAQlC,GAJIiE,GAAYa,IACdb,GAAW,IAGRH,IAAaG,IAAaC,EAAU,CACvC,GAAIY,EAAS,CACX,MAQMxE,EARyC,CAC7C,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAEakE,GACpBtE,EAAO7H,KAAK,CAAE2H,IAAKM,EAAMA,KAAMsD,EAAetD,EAAOkE,EAAGlG,OAAAA,IACpDsF,IACQ,MAANY,EACFtE,EAAO7H,KAAK,CAAE2H,IAAK,MAAOM,KAAM,MAAOhC,OAAAA,IACxB,MAANkG,GACTtE,EAAO7H,KAAK,CAAE2H,IAAK,MAAOM,KAAM,OAAQhC,OAAAA,KAG5C,SAEF4F,EACEU,EAAQJ,IACD,MAANA,GAAaI,EAAQH,IACf,MAAND,IAAcI,EAAQH,IAAsB,MAAXA,GACpCN,GAAQ,EACRF,GAAYC,EACZ,MAAMlE,EAAoBiE,EAAW,MAAQ,MAC7C/D,EAAO7H,KAAK,CAAE2H,IAAAA,EAAKM,KAAM,GAAIhC,OAAAA,IAE/B4B,EAAO,GAAIA,GAAU,GAAGI,MAAQkE,EAElC,MAAO,CAAEtE,OAAAA,EAAQyD,YAAaG,EAAWE,OAAa,GAutBtBgB,CAASvB,EAAMC,GACzCuB,EAvKR,SAA0BtB,EAAmCzD,GAC3D,MAAMwD,EAAW,GAAIxD,GAAUA,EAAO,GAAG5B,OAAOoF,SAAW,GACrD3C,EAAwB,GACxBO,EAAM,CAAC3C,EAAWL,IACtByC,EAAO1I,KAAK,CAAEqG,EAAG,QAASC,EAAAA,EAAGL,OAAAA,IAG/B,GAAIqF,EAAa,CACf,MAAOU,EAAMC,GAAOX,EAEpB,OADArC,EAAI,mCAAoC,CAAEoC,SAAAA,EAAoBW,KAAAA,EAAMC,IAAAA,IAC7DvD,EAIT,MAAMmE,EAAYjH,GAChB,GAAIiC,EAAO7D,QAAO,EAAG2D,IAAAA,KAAUA,IAAQ/B,MAClCkH,EAAMC,GAAQ,CAACF,EAAS,KAAMA,EAAS,MAC9C,CACE,MAAOb,EAAMC,GA7CjB,SACEpE,EACAiF,EACAC,GAIA,MAAMC,EAAWD,GAAQD,GAClBZ,EAAG7E,GAAK,CAAC2F,EAAW,IAAM,IAAKA,EAAW,IAAM,KACjDC,EAAYD,EAAW,GAAK,EAClC,QACMlC,EAAM,GAAIjD,GAASjC,EAAIoH,EAAW,EAAIlC,EAAM,EAAGR,EAAQ,EAC3D0C,EAAWpH,EAAIkF,EAAMlF,GAAK,EAC1BA,GAAKqH,EACL,CACA,MAAM,IACJtF,EACA1B,QAAQ,KAAE+F,EAAI,IAAEC,IACdpE,EAAOjC,GAEX,GADA0E,GAAS,GAAM3C,IAAQuE,GAAK,GAAMvE,IAAQN,GACtCiD,EAAQ,EACV,MAAO,CAAC0B,EAAMC,GAGlB,MAAO,CAAC,EAAG,GAqBWiB,CAAmBrF,EAAQiF,EAAMC,GACjDf,EAAOC,GACThD,EAAI,wBAAyB,CAAEoC,SAAAA,EAAoBW,KAAAA,EAAMC,IAAAA,IAK7D,IAAIkB,EACJ,QAASvH,EAAI,EAAGwH,GAAW,EAAOxH,EAAI,GAAIiC,KAAWjC,EAAG,CACtD,GAAIwH,GAA8B,MAAlBvF,EAAOjC,GAAG+B,IAAa,CACrCwF,EAAYtF,EAAOjC,GACnB,MAEFwH,EAA6B,MAAlBvF,EAAOjC,GAAG+B,IAMvB,OAJIwF,GACFlE,EAAI,6BAA8BkE,EAAUlH,QAGvCyC,EAkIa2E,CAAiB/B,EAAazD,GAClD,GAAI,GAAI+E,GACN,MAAO,CAAElE,OAAQkE,EAAaU,MAAO,IAEvC,MAEMC,EA9sBR,SAAiBC,GACf,MAAMC,EAAU,GACd,GAAI,GAAW,GACI,QAAnB,EAAQ,GAAG9F,KACS,aAApB,EAAQ,GAAGM,KACPqF,EAAQE,EAASxJ,QAAO4B,GAAK6H,EAAO7H,KACpC8H,EAAU,GAAKF,EAASxJ,QAAO4B,IAAM6H,EAAO7H,MAC5C+H,EAAYL,EAAMzJ,KAAIgE,IAAW,CACrCgB,KAAMhB,EAAO,GAAGI,KAChBJ,OAAQ,GAAMA,EAAQ,GACtB5B,OAAQ4B,EAAO,GAAG5B,WAEpB,OAAO,GAAIyH,GACP,GAAOC,EAAW,CAChB,CACE9E,KAAM,QACNhB,OAAQ6F,EACRzH,OAAQyH,EAAQ,GAAGzH,UAGvB0H,EAyrBaC,CA1tBnB,SAAiB/F,GACf,MAAM2F,EAAsB,CAAC,IAC7B,IAAIlD,EAAQ,EAQZ,OAPAzC,EAAOe,SAAQiF,IACbL,EAAS,GAAIA,GAAY,GAAGxN,KAAK6N,GACjCvD,GAAS5C,GAAYmG,GACP,IAAVvD,GACFkD,EAASxN,KAAK,OAGXwN,EA+sBUM,CAAQjG,IAEOhE,KAAIkK,GAnOtC,UACE,KAAElF,EAAI,OAAEhB,GACR5B,GAEA,MAAMgD,EAAM,CAAC3C,EAAW4C,EAAOjD,IACC,CAAC,MAAO,CAAEI,EAAG,QAASC,EAAAA,EAAGL,OAAQiD,IAEjE,GAAa,MAATL,GAAyB,MAATA,EAClB,OAAOI,EAAI,qBAGb,GAAsB,MAAlBpB,EAAO,GAAGF,IACZ,OAAOsB,EAAI,uBAEb,MAAM,OAAErF,EAAQ8E,OAAQH,GAAQE,GAAYZ,GAC5C,KAAO,GAAIA,IACT,GAAKU,EAAKR,GAASF,EAAQjE,IAE7B,QAASsD,EAAI,EAAG4D,EAAM,GAAIvC,GAAMrB,EAAI4D,EAAK5D,IAAK,CAC5C,MAAMrJ,EAAI0K,EAAIrB,GACd,GAAc,QAAVrJ,EAAE8J,IACJ,OAAOsB,EAAIpL,EAAEF,MAAOE,EAAEoI,QAG1B,MAAO,CAAC,OAAQ,CAAE4C,KAAAA,EAAMN,IAAAA,IA4MtByF,CAAUD,EAAO,CACf1C,SAAAA,EACAW,KAAM+B,EAAM9H,OAAO+F,KACnBC,IAAK8B,EAAM9H,OAAOgG,QAGhBgC,EAAkB,GACtBvF,EAAwB,GAC1B6E,EAAe3E,SAAQsF,IACN,QAAXA,EAAI,GACNxF,EAAO1I,KAAKkO,EAAI,IAEhBD,EAAQjO,KAAKkO,EAAI,OAGrB,GAAKxF,EAAQ,GAAKuF,EAAQpK,KAAIsK,GAAKxD,GAAewD,EAAE5F,MAAQ,OAC5D,MAAM+E,EAAe,GAErB,OADAW,EAAQrF,SAAQpD,GAAS8H,EAAM9H,EAAKqD,MAAQrD,IACrC,CAAEkD,OAAAA,EAAQ4E,MAAAA,GCp4BnB,SAASnQ,GAAIiR,EAActR,GACzB,OAAKsR,EAAMzK,KAAKrE,IAAIxC,GAGb,CAAEuR,KAAM,MAAO1Q,MAAOyQ,EAAMzK,KAAKxG,IAAIL,IAFnC,CAAEuR,KAAM,MAAOpF,IAAK,IAAInM,gBAKnC,SAASwR,GAAIF,EAActR,EAAa4H,GACtC0J,EAAMzK,KAAK2K,IAAIxR,EAAK4H,GAItB,SAAS6J,GAAIH,EAAcvF,EAAcrC,GAEvC,OAAQqC,GAAA,IACD,gBACHuF,EAAMI,QAAUhI,EAAK,GAAGX,EAAI,KAC5B,cAEA,MAAO,CAAEwI,KAAM,MAAOpF,IAAK,aAAaJ,oBAE5C,MAAO,CAAEwF,KAAM,MAAO1Q,MARD,CAAEiI,EAAG,OAAQC,OAAG,IAWvC,MAAMd,GAKA,CAEJ,CAAE8D,KAAM,gBAAiBuC,KAAM,kBAAmBqD,IAAK,iBACvD,CACE5F,KAAM,oBACNuC,KAAM,0BACNqD,IAAK,uBAEP,CAAE5F,KAAM,YAAauC,KAAM,UAAWqD,IAAK,KAC3C,CAAE5F,KAAM,gBAAiBuC,KAAM,QAASqD,IAAK,MAC7C,CAAE5F,KAAM,oBAAqBuC,KAAM,wBAAyBqD,IAAK,KACjE,CAAE5F,KAAM,mBAAoBuC,KAAM,yBAA0BqD,IAAK,MACjE,CACE5F,KAAM,QACNuC,KAAM,2DACNqD,IAAK,kBAEP,CACE5F,KAAM,qBACNuC,KAAM,gHAINqD,IAAK,OAEP,CAAE5F,KAAM,mBAAoBuC,KAAM,8BAA+BqD,IAAK,MACtE,CACE5F,KAAM,sBACNuC,KAAM,iDACNqD,IAAK,gBAEP,CACE5F,KAAM,qBACNuC,KAAM,+DACNqD,IAAK,eAEP,CAAE5F,KAAM,kBAAmBuC,KAAM,cAAeqD,IAAK,KACrD,CAAE5F,KAAM,kBAAmBuC,KAAM,oBAAqBqD,IAAK,MAC3D,CACE5F,KAAM,mBACNuC,KAAM,yDACNqD,IAAK,aAEP,CACE5F,KAAM,qBACNuC,KAAM,sCACNqD,IAAK,MAEP,CACE5F,KAAM,qBACNuC,KAAM,gCACNqD,IAAK,gCAEP,CACE5F,KAAM,aACNuC,KAAM,0IAKNqD,IAAK,iCAEP,CAAE5F,KAAM,sBAAuBuC,KAAM,cAAeqD,IAAK,KACzD,CAAE5F,KAAM,iBAAkBuC,KAAM,oBAAqBqD,IAAK,KAC1D,CAAE5F,KAAM,qBAAsBuC,KAAM,oBAAqBqD,IAAK,KAC9D,CAAE5F,KAAM,sBAAuBuC,KAAM,oBAAqBqD,IAAK,KAC/D,CACE5F,KAAM,sBACNuC,KAAM,2BACNqD,IAAK,MAEP,CAAE5F,KAAM,kBAAmBuC,KAAM,2BAA4BqD,IAAK,MAClE,CACE5F,KAAM,kBACNuC,KAAM,8CACNqD,IAAK,MAEP,CAAE5F,KAAM,sBAAuBuC,KAAM,UAAWqD,IAAK,WACrD,CAAE5F,KAAM,iBAAkBuC,KAAM,yBAA0BqD,IAAK,YAC/D,CACE5F,KAAM,wBACNuC,KAAM,4CACNqD,IAAK,SAEP,CACE5F,KAAM,yBACNuC,KAAM,4BACNqD,IAAK,WAEP,CACE5F,KAAM,oBACNuC,KAAM,2CACNqD,IAAK,wBAEP,CACE5F,KAAM,0BACNuC,KAAM,qCAENqD,IAAK,SAEP,CACE5F,KAAM,yBACNuC,KAAM,yBACNqD,IAAK,qBAEP,CACE5F,KAAM,yBACNuC,KAAM,+BACNqD,IAAK,kBAEP,CACE5F,KAAM,aACNuC,KAAM,kGAINqD,IAAK,UAEP,CACE5F,KAAM,cACNuC,KAAM,mGAGNqD,IAAK,QAGP,CAAE5F,KAAM,sBAAuBuC,KAAM,sCACrC,CACEvC,KAAM,kBACNuC,KAAM,kDACNqD,IAAK,gBAEP,CACE5F,KAAM,wBACNuC,KAAM,+BACNqD,IAAK,OAEP,CACE5F,KAAM,sBACNuC,KAAM,oFAGNqD,IAAK,aAEP,CACE5F,KAAM,uBACNuC,KAAM,uFAENqD,IAAK,yBAEP,CACE5F,KAAM,yBACNuC,KAAM,2CACNqD,IAAK,cAEP,CACE5F,KAAM,uBACNuC,KAAM,mDACNqD,IAAK,KAEP,CACE5F,KAAM,uBACNuC,KAAM,uFAENqD,IAAK,SAEP,CACE5F,KAAM,iBACNuC,KAAM,uCACNqD,IAAK,eAEP,CAAE5F,KAAM,mBAAoBuC,KAAM,+BAAgCqD,IAAK,KACvE,CACE5F,KAAM,sBACNuC,KAAM,qCACNqD,IAAK,KAEP,CACE5F,KAAM,kBACNuC,KAAM,4CACNqD,IAAK,OAEP,CACE5F,KAAM,YACNuC,KAAM,6FAINqD,IAAK,MAEP,CACE5F,KAAM,YACNuC,KAAM,oDACNqD,IAAK,iBAEP,CACE5F,KAAM,YACNuC,KAAM,4HAINqD,IAAK,WAEP,CACE5F,KAAM,uBACNuC,KAAM,gFAGNqD,IAAK,KAEP,CACE5F,KAAM,qBACNuC,KAAM,+EAGNqD,IAAK,UAEP,CACE5F,KAAM,iBACNuC,KAAM,kFAGNqD,IAAK,WAEP,CACE5F,KAAM,kBACNuC,KAAM,qBACNqD,IAAK,WAEP,CACE5F,KAAM,oBACNuC,KAAM,cACNqD,IAAK,WAEP,CACE5F,KAAM,oBACNuC,KAAM,kBACNqD,IAAK,KAEP,CACE5F,KAAM,0BACNuC,KAAM,yBACNqD,IAAK,KAEP,CACE5F,KAAM,0BACNuC,KAAM,yCACNqD,IAAK,OAEP,CACE5F,KAAM,0BACNuC,KAAM,kBACNqD,IAAK,KAEP,CACE5F,KAAM,kBACNuC,KAAM,8BACNqD,IAAK,SAEP,CACE5F,KAAM,qBACNuC,KAAM,gCACNqD,IAAK,iBAEP,CACE5F,KAAM,uBACNuC,KAAM,2DACNqD,IAAK,eAEP,CACE5F,KAAM,wBACNuC,KAAM,qDACNqD,IAAK,aAEP,CACE5F,KAAM,yBACNuC,KAAM,+BACNqD,IAAK,WAEP,CAAE5F,KAAM,YAAauC,KAAM,qBAAsBqD,IAAK,MAEtD,CACE5F,KAAM,2BACNuC,KAAM,oFAGNqD,IAAK,IACLxF,IAAK,CAAC,SAER,CAAEJ,KAAM,yBAA0BuC,KAAM,IAAKnC,IAAK,CAAC,cACnD,CACEJ,KAAM,uBACNuC,KAAM,iCACNnC,IAAK,CAAC,cAER,CAAEJ,KAAM,oBAAqBuC,KAAM,MAAOnC,IAAK,CAAC,aAChD,CAAEJ,KAAM,cAAeuC,KAAM,uBAAwBnC,IAAK,CAAC,WAC3D,CACEJ,KAAM,cACNuC,KAAM,0EAGNnC,IAAK,CAAC,WAER,CAAEJ,KAAM,eAAgBuC,KAAM,gBAAiBnC,IAAK,CAAC,WAErD,CACEJ,KAAM,eACNuC,KAAM,wIAKNqD,IAAK,OAEP,CACE5F,KAAM,iBACNuC,KAAM,4PAMNqD,IAAK,WAEP,CACE5F,KAAM,cACNuC,KAAM,mIAGNqD,IAAK,kBAGP,CACE5F,KAAM,UACNuC,KAAM,oDACNqD,IAAK,aAEP,CAAE5F,KAAM,MAAOuC,KAAM,sBAAuBqD,IAAK,aAEjD,CAAE5F,KAAM,eAAgBuC,KAAM,KAAMnC,IAAK,CAAC,UAC1C,CAAEJ,KAAM,sBAAuBuC,KAAM,oBAAqBnC,IAAK,CAAC,UAChE,CAAEJ,KAAM,sBAAuBuC,KAAM,kBAAmBnC,IAAK,CAAC,UAC9D,CACEJ,KAAM,oBACNuC,KAAM,iBACNnC,IAAK,CAAC,UAER,CAAEJ,KAAM,iBAAkBuC,KAAM,aAAcnC,IAAK,CAAC,UACpD,CAAEJ,KAAM,wBAAyBuC,KAAM,iBAAkBnC,IAAK,CAAC,UAC/D,CAAEJ,KAAM,wBAAyBuC,KAAM,kBAAmBnC,IAAK,CAAC,UAChE,CAAEJ,KAAM,sBAAuBuC,KAAM,YAAanC,IAAK,CAAC,UAExD,CAAEJ,KAAM,sBAAuBuC,KAAM,wBAAyBnC,IAAK,CAAC,SACpE,CACEJ,KAAM,sBACNuC,KAAM,kCACNnC,IAAK,CAAC,SAER,CACEJ,KAAM,sBACNuC,KAAM,6CACNnC,IAAK,CAAC,UCzYGhI,GAAM,EAAG4E,EAAAA,KAAaA,EACtBrH,GAAM,EAAGqH,EAAAA,KAAaA,EACtBnC,GAAM,EAAGmC,EAAAA,KAAaA,EACtB6I,GAAM,EAAG7I,EAAAA,KAAaA,EAEtB8I,GAAa,CAAC7O,EAAUC,IACnC1B,EAAIyB,KAAOzB,EAAI0B,KAAOD,EAAEsH,MAAK,CAACvJ,EAAGqJ,KAAO0H,GAAQ/Q,EAAGkC,EAAEmH,MAE1C0H,GAAU,CAAC9O,EAAQC,KAC9B,GAAY,SAARD,EAAE8F,GAAwB,SAAR7F,EAAE6F,EACtB,OAAO,EAET,GAAI9F,EAAE8F,IAAM7F,EAAE6F,EACZ,OAAO,EAET,OAAQ9F,EAAE8F,GAAA,IACH,OACH,OAAO,MACJ,OACc,IACd,MACH,OAAO9F,EAAE+F,IAAM9F,EAAE8F,EAAA,IACd,MACH,OAAO8I,GAAW7O,EAAE+F,EAAGnC,GAAI3D,IAAA,IACxB,OAAQ,CACX,MAAM8O,EAAKH,GAAI3O,GACf,OAAO1B,EAAIyB,EAAE+F,EAAEnE,QAAUrD,EAAIwQ,EAAGnN,OAASiN,GAAW7O,EAAE+F,EAAEnE,KAAMmN,EAAGnN,MAAA,IAE9D,UACA,UACA,UACA,OACH,OAAOlD,GAAIsB,KAAOtB,GAAIuB,GAAA,IACnB,MACH,OAAcD,EAAE+F,EAAGgD,OAAgB9I,EAAE8F,EAAGgD,KAE5C,OJyP4D,GItPjDiG,GAAatK,GACxBA,EAAKT,QAAO,CAACgL,EAAKlJ,IAAMkJ,EAAMC,GAAQnJ,IAAI,IAE/BmJ,GAAWtK,IACtB,MAAMuK,EAAUpJ,GAAoB,QAARA,EAAED,EAAc,IAAIC,EAAEA,KAAOmJ,GAAQnJ,GACjE,GAAc,QAAVnB,EAAIkB,EACN,OAAOlB,EAAImB,EAAEgD,KAAA,GACM,QAAVnE,EAAIkB,EACb,MAAO,IAAIlB,EAAImB,EAAEhC,IAAIoL,GAAQrK,KAAK,WACf,SAAVF,EAAIkB,EAAc,CAC3B,MAAM,KAAElE,EAAI,KAAE8C,GAASE,EAAImB,GACpBqJ,EAAIC,GAAM,CAACzN,EAAKmC,IAAIoL,GAASzK,EAAKX,IAAIoL,IAE7C,MAAO,IADSC,EAAGrL,KAAI,CAACuL,EAAGlI,IAAM,GAAGkI,KAAKD,EAAGjI,OACzBtC,KAAK,eACL,SAAVF,EAAIkB,EACN,OACY,SAAVlB,EAAIkB,EACN,IAEF,GAAGlB,EAAImB,KAGHwJ,GAAW3K,GACZ,QAAVA,EAAIkB,EACA7H,EAAM2G,EAAImB,GACA,QAAVnB,EAAIkB,EACJ,IAAIlB,EAAImB,GAAGhC,KAAI3E,IAAM,CAAE0G,EAAG,MAAOC,EAAG3G,MAC1B,SAAVwF,EAAIkB,EACJlB,EAAImB,EAAEnE,KAAKmC,KAAI,CAACuL,EAAGlI,KAAO,CACxBtB,EAAG,MACHC,EAAG,CAACuJ,EAAG1K,EAAImB,EAAErB,KAAK0C,QAEpB,GAEOoI,GAAU9I,IACjBnI,EAAImI,GAAQ,GAAM,GACpBA,EAAKuD,MAEP,MAAMrI,EAAO8E,EAAKxC,QAAO,CAACuL,EAAGrI,IAAMA,EAAI,GAAM,IACvC1C,EAAOgC,EAAKxC,QAAO,CAACuL,EAAGrI,IAAMA,EAAI,GAAM,IACvCsI,EAAgB,GACpBC,EAAgB,GAUlB,OATA/N,EAAKkH,SAAQ,CAAC9L,EAAKoK,KACjB,MAAMwI,EAAcF,EAAO3I,WAAUuI,GAAKR,GAAQQ,EAAGtS,MAChC,IAAjB4S,GACFF,EAAOxP,KAAKlD,GACZ2S,EAAOzP,KAAKwE,EAAK0C,KAEjBuI,EAAOC,GAAelL,EAAK0C,MAGxB,CACLtB,EAAG,OACHC,EAAG,CAAEnE,KAAM8N,EAAQhL,KAAMiL,KAIhBE,GAAU,EAAGjO,KAAAA,EAAM8C,KAAAA,GAAc1H,KAC5C,MAAMkC,EAAM0C,EAAKmF,WAAUuI,GAAKR,GAAQQ,EAAGtS,KAC3C,OAAgB,IAATkC,EAAkB,CAAE4G,EAAG,OAAQC,OAAG,GAAcrB,EAAKxF,IAGjD4Q,GAAU,EAAGlO,KAAAA,EAAM8C,KAAAA,GAAc1H,EAAU4H,KACtD,MAAOmL,EAAOC,GAAS,CAAC/R,EAAM2D,GAAO3D,EAAMyG,IACrCxF,EAAM0C,EAAKmF,WAAUuI,GAAKR,GAAQQ,EAAGtS,KAO3C,OANa,IAATkC,EACF8Q,EAAM9Q,GAAO0F,GAEbmL,EAAM7P,KAAKlD,GACXgT,EAAM9P,KAAK0E,IAEA,CAAEhD,KAAMmO,EAAOrL,KAAMsL,KC5G5B/N,IAAG,GAAEI,IAAG,GAAED,IAAG,GAAEE,IAAG,GAAEI,KAAI,GAAEH,KAAI,GAAEb,MAAK,GAAEe,KAAI,GAAED,MAAK,GAAEL,IAAG,GAAED,IAAG,IAAK,GACjES,KAAI,GAAEE,KAAI,GAAEC,MAAK,IAAK,GACtB/C,OAAM,GAAEP,IAAG,GAAEM,KAAI,GAAEI,KAAI,GAAEK,QAAO,GAAEtC,MAAK,GAAEI,OAAM,GAAE+B,OAAM,IAAK,GAC5DR,KAAI,GAAEnB,KAAI,GAAEiB,OAAM,GAAEP,IAAG,GAAEG,OAAM,GAAEP,OAAM,GAAE2B,UAAS,GAAEF,UAAS,IAAK,GAClEI,KAAI,GAAEC,UAAS,GAAEC,QAAO,GAAEE,SAAQ,GAAEE,SAAQ,GAAEjC,OAAM,IAAK,GACzD6C,UAAS,GAAEL,QAAO,GAAEH,QAAO,IAAK,GAChC3C,MAAK,GAAEJ,IAAG,GAAEsD,QAAO,GAAEF,MAAK,GAAE7D,MAAK,IAAK,EAQxCmS,GAAmD,GACzD,IAEIC,GAFAnF,GAAe,GACfoF,GAAiC,GAErC,MAAMC,GAAQrK,GAAegF,GAAM7K,KAAK,CAAE4F,EAAG,OAAQC,EAAAA,IAC/CsK,GAAQtK,GAAcgF,GAAM7K,KAAK,CAAE4F,EAAG,MAAOC,EAAAA,IAC7CuK,GAAO,CAACvK,EAAI,KAAOgF,GAAM7K,KAAK,CAAE4F,EAAG,MAAOC,EAAAA,IAC1CwK,GAAO,CAACxK,EAAW,KAAOgF,GAAM7K,KAAK,CAAE4F,EAAG,MAAOC,EAAAA,IACjDyK,GAAQzK,GAAYgF,GAAM7K,KAAK,CAAE4F,EAAG,OAAQC,EAAAA,IAC5C0K,GAAO,IAAM1F,GAAM7K,KAAK,CAAE4F,EAAG,OAAQC,OAAG,IACxC2K,GAAQ3K,GAAcgF,GAAM7K,KAAK,CAAE4F,EAAG,OAAQC,EAAAA,IA+tBpD,SAAS4K,GACPC,EACA3K,EACAE,EACA0K,GAAa,GAEb,MAAMC,EAAiB,CACrB,CACEvK,EAAG,QACHC,EAAG,GAAGlB,EAAUW,EAAGH,sCACnBK,OAAAA,IAGJ,GAAa,QAATF,EAAGH,GAAwB,SAATG,EAAGH,EAAc,CACrC,MAAMiD,EAAO9C,EAAGF,EAChB,OAAIhD,EAAIgG,GACFhG,EAAIgG,GAAMgI,SACJjN,IACN,MAAMkN,EAAWf,GAAYlH,GAAMjF,GACnC,GAAsB,QAAlBkN,EAASzC,KACX,MAAO,CAAC,CAAEhI,EAAG,WAAYC,EAAGwK,EAAS7H,IAAKhD,OAAAA,IAE5C4E,GAAM7K,KAAK8Q,EAASnT,QAGhBiG,GAtvBd,SACEmC,EACAS,EACAkK,EACAzK,EACA0K,GAEA,MAAMI,EAAQ5K,GAAgB,CAACY,GAAQZ,EAAKF,IAE5C,GAAI0K,EAAY,CACd,MAAMK,EAAalL,EAAWC,EAAI,GAAIS,GAAOP,GAC7C,GAAI+K,EACF,OAAOA,EAIX,CACE,MAAMA,EAAazK,EACjBR,EACAS,EAAK3C,KAAI/D,GAAK,CAACA,EAAE8F,KACjBK,GAEF,GAAI+K,EACF,OAAOA,EAIX,OAAQjL,GAAA,IACD,MAKH,YAJA8E,GAAM7K,KAAK,CACT4F,EAAG,MACHC,EAAGiJ,GAAUtI,KAEf,IACG,YACA,YAGH,OAFAkK,EAAI5N,MAAMgM,GAAUtI,GAAc,UAAPT,QAC3BwK,KACA,IACG,MAEH,YADAF,GAAK7J,GACL,IACG,OAEH,YADAqE,GAAM7K,KAAKsP,GAAO9I,IAClB,IAEG,MAQH,YAPA2J,GACgB,QAAd3J,EAAK,GAAGZ,EACJ,GAAKY,EAAK,GAAGX,GACC,QAAdW,EAAK,GAAGZ,EACR,GAAIY,EAAK,GAAGX,GACZ,GAAI6I,GAAIlI,EAAK,IAAI9E,OAEvB,IACG,SAMH,YALI,GAAM8E,EAAK,GAAGX,GAChBsK,GAAK,GAAM3J,EAAK,GAAGX,IAEnB0K,MAEF,IACG,SAEH,YADA1F,GAAM7K,KAAK,CAAE4F,EAAG,MAAOC,EAAG,IAAImJ,GAAQxI,EAAK,QAC3C,IACG,IAEH,YADA0J,IAAMvK,EAAMa,EAAK,KACjB,IACG,QACA,KACH,QAASU,EAAI,EAAG4D,EAAM,GAAItE,GAAOU,EAAI4D,IAAO5D,EAC1C,GAAI0H,GAAQpI,EAAKU,EAAI,GAAIV,EAAKU,OAAgB,MAAPnB,GAErC,YADAmK,IAAK,GAKT,YADArF,GAAM7K,KAAKwG,EAAK,IAChB,IACG,IAMH,YALA2J,GACgB,IAAd,GAAI3J,IACCvF,GAAIuF,EAAK,IACVA,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM4E,EAAM5E,KAE7C,IACG,KAEH,YADA8D,GAAKlP,GAAIuF,EAAK,MAAsB,IAAd,GAAIA,GAAc,EAAIvF,GAAIuF,EAAK,MACrD,IACG,IAEH,YADA2J,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM4E,EAAM5E,KAC5C,IACG,IAEH,YADA8D,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM4E,EAAM5E,KAC5C,IACG,IAEH,YADA8D,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM4E,EAAM5E,KAC5C,IACG,KAEH,YADA8D,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM,GAAM4E,EAAM5E,MAClD,IACG,YACA,SACH,OAAIuC,GAAQpI,EAAK,GAAIA,EAAK,OAAgB,UAAPT,QACjCmK,IAAK,QAGPrF,GAAM7K,KAAKwG,EAAK,IAChB,IACG,QAEH,YADA2J,GAAa3J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,QAEH,YADAsK,GAAa3J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,QAEH,YADAsK,GAAa3J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,QAEH,YADAsK,GAAa3J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,SAEH,YADAsK,GAAK,GAAc3J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,IAC/C,IACG,QAEH,YADAqK,GAAa1J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,QAEH,YADAqK,GAAa1J,EAAK,GAAGX,EAAYW,EAAK,GAAGX,GACzC,IACG,SAEH,YADAqK,GAAa1J,EAAK,GAAGX,GAAaW,EAAK,GAAGX,GAC1C,IACG,SAEH,YADAqK,GAAa1J,EAAK,GAAGX,GAAaW,EAAK,GAAGX,GAC1C,IACG,MAEH,YADAsK,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM4E,EAAM5E,KAC5C,IACG,MAEH,YADA8D,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM,GAAI4E,EAAK5E,MAC/C,IACG,MAEH,YADA8D,GAAK3J,EAAK3C,IAAI5C,IAAK8C,QAAO,CAACkN,EAAK5E,IAAM,GAAI4E,EAAK5E,MAC/C,IACG,QACA,QACA,SACA,KACH,QAASnF,EAAI,EAAG4D,EAAM,GAAItE,GAAOU,EAAI4D,IAAO5D,EAAG,CAC7C,MAAO,EAAG,GAAK,CAASV,EAAKU,EAAI,GAAGrB,EAAWW,EAAKU,GAAGrB,GACvD,GACU,MAAPE,GAAc,GAAK,GACZ,MAAPA,GAAc,GAAK,GACZ,OAAPA,GAAe,EAAI,GACZ,OAAPA,GAAe,EAAI,EAGpB,YADAmK,IAAK,GAKT,YADAA,IAAK,GACL,IACG,MAEH,YADAC,GAAa3J,EAAK,GAAGX,EAAI,GACzB,IACG,MAEH,YADAsK,GAAa3J,EAAK,GAAGX,EAAI,GACzB,IACG,MAEH,YADAsK,GAAK,GAAY3J,EAAK,GAAGX,IACzB,IACG,QACH,GAAkB,IAAd,GAAIW,GAAa,CACnB,MAAM3I,EAAI,IAAc2I,EAAK,GAAGX,EAChCsK,GAAK,GAAc3J,EAAK,GAAGX,EAAIhI,GAAKA,QAEpCsS,GAAK,GAAc3J,EAAK,GAAGX,IAE7B,WACG,UACA,UACA,UACA,WACA,YACA,WACA,WACA,WACA,QAMH,YALAsK,GACE,CAAEjO,IAAG,GAAEC,IAAG,GAAEC,IAAG,GAAEC,KAAI,GAAEb,MAAK,GAAEe,KAAI,GAAEE,KAAI,GAAEE,KAAI,GAAEC,MAAK,IAAGmD,GACtD9E,GAAIuF,EAAK,MAGb,IACG,MAEH,YADA0J,GAAK1J,EAAK0K,MAAMvL,IAChB,IACG,KAEH,YADAuK,GAAK1J,EAAKY,KAAKzB,IACf,IACG,MAMH,YALIA,EAAMa,EAAK,MAAQb,EAAMa,EAAK,IAChCqE,GAAM7K,KAAK2F,EAAMa,EAAK,IAAMA,EAAK,GAAKA,EAAK,IAE3C0J,IAAK,IAEP,IACG,QACA,QACA,QACA,SACA,SACA,MACH,MAAOpQ,EAAGC,GAAK,CAACkB,GAAIuF,EAAK,IAAKvF,GAAIuF,EAAK,KAcvC,YAbA2J,GACS,MAAPpK,EACIjG,EAAIC,EACG,MAAPgG,EACAjG,EAAIC,EACG,MAAPgG,EACAjG,EAAIC,EACG,OAAPgG,EACAjG,GAAKC,EACE,OAAPgG,EACAjG,GAAKC,EACLD,IAAMC,GAEZ,IACG,IAEH,YADAoQ,IAAMlP,GAAIuF,EAAK,KACf,IACG,WACA,QAEH,YADA0J,GAAKjP,GAAIuF,EAAK,IAAM,IAAc,SAAPT,EAAgB,EAAI,IAC/C,IACG,WACA,WACA,QAAS,CACZ,MAAMsG,EAAIpL,GAAIuF,EAAK,IAEnB,YADA0J,GAAY,SAAPnK,EAAgBsG,EAAI,EAAW,SAAPtG,EAAgBsG,EAAI,GAAKA,GACtD,IAEG,YACA,WACA,YACA,WACA,YACA,WACA,WACA,YACA,QAYH,YAXA6D,GACU,UAAPnK,GAAgC,SAAdS,EAAK,GAAGZ,GACjB,SAAPG,GAA+B,QAAdS,EAAK,GAAGZ,GAClB,UAAPG,GAAgC,SAAdS,EAAK,GAAGZ,GACnB,SAAPG,GAA+B,QAAdS,EAAK,GAAGZ,GAClB,UAAPG,GAAgC,SAAdS,EAAK,GAAGZ,GACnB,SAAPG,GAA+B,QAAdS,EAAK,GAAGZ,GAClB,SAAPG,GAA+B,QAAdS,EAAK,GAAGZ,GAClB,UAAPG,IAAiC,SAAdS,EAAK,GAAGZ,GAA8B,QAAdY,EAAK,GAAGZ,IAC5C,UAAPG,GAAgC,SAAdS,EAAK,GAAGZ,GAE/B,IACG,OAEH,YADAsK,GAAK,GAAI1R,GAAIgI,EAAK,IAAKhI,GAAIgI,EAAK,MAChC,IACG,MAAO,CACV,IAAIU,GAAK,EACT,GAAkB,QAAdV,EAAK,GAAGZ,EAAa,CACvB,GAAkB,QAAdY,EAAK,GAAGZ,EACV,OAAOmL,EAAK,oCAEd,KAAI,GAAIvK,GAAQ,GAET,CACL,MAAMxI,EAAMwI,EAAK,GAAGX,EAAElB,MAAM,IAG5B,OAFA3G,EAAIiD,GAAIuF,EAAK,KAAOA,EAAK,GAAGX,OAC5BuK,GAAKpS,EAAI4G,KAAK,KAJdsC,EAAI,GAAOV,EAAK,GAAGX,EAAGW,EAAK,GAAGX,QAK9B,GAEqB,QAAdW,EAAK,GAAGZ,EAAa,CAC9B,KAAI,GAAIY,GAAQ,GAET,CACL,MAAMX,EAAI,GAAMW,EAAK,GAAGX,GAGxB,OAFAA,EAAE5E,GAAIuF,EAAK,KAAOA,EAAK,QACvB6J,GAAKxK,GAJLqB,EAAIV,EAAK,GAAGX,EAAEgB,WAAU,GAAK+H,GAAQ,EAAGpI,EAAK,MAajD,aALW,IAAPU,EACFqJ,KAEAJ,GAAKjJ,IAEP,IAEG,UACA,UACA,aACA,aACA,aACA,WACA,QAAS,CACZ,MAAMiK,EAAUV,GAAOC,EAAKlK,EAAK0B,QAAUjC,GAC3C,GAAW,QAAPF,GAAuB,QAAPA,EAAc,CAChC,MAAMmF,EAAS1E,EAAKK,WAClB,EAAGjB,EAAAA,KAAc,QAANA,GAAqB,QAANA,GAAqB,SAANA,IAE3C,IAAgB,IAAZsF,EAEF,OAAO6F,EACL,YACE7F,EAAS,qDAHG9F,EAAUoB,EAAK0E,GAAQtF,MAS3C,GAAW,QAAPG,EAAc,CAChB,MAAMqL,EAAS5K,EAAK3C,IAAIwL,IAClBgC,EAAOD,EAAOvN,IAAI,IAClByN,EAAWD,EAAKxN,KAAI,CAAC0L,EAAGrI,IAC5B,GAAMmK,EAAM,EAAGnK,EAAI,GAAGnD,QAAO,CAACkN,EAAK/E,IAAM+E,EAAM/E,MAEjDoF,EAAS3I,QAAQ,GACjB,MAAMmC,EAAMwG,EAASvH,MACrB,GAAIe,EAAM4F,EAAIa,WACZ,MAAO,CAAC,CAAElL,EAAG,SAAUC,EAAG,2BAA4BL,OAAAA,IAExD,MAAM,EAAe,GACrB,QAASL,EAAI,EAAGA,EAAIkF,IAAOlF,EAAG,CAC5B,MAAM4L,EAAUF,EAASzN,KAAI,CAAC4N,EAAGvK,IAAM,GAAOtB,EAAI6L,EAAKJ,EAAKnK,MACtDwB,EAASyI,EAAQC,EAAOvN,KAAI,CAAC,EAAGqD,IAAM,EAAEsK,EAAQtK,OACtD,GAAIwB,EACF,OAAOA,EAET,EAAM1I,KAAK6K,GAAMd,OAGnB,YADAsG,GAAK,GAIP,GAAW,QAAPtK,EAAc,CAChB,MAAMqL,EAAS5K,EAAK3C,IAAIwL,IAClBqC,EAAW,MAAON,EAAOvN,IAAI,KAC7B,EAAe,GACrB,QAASqD,EAAI,EAAGA,EAAIwK,IAAYxK,EAAG,CACjC,MAAMwB,EAASyI,EAAQC,EAAOvN,KAAI,GAAK,EAAEqD,MACzC,GAAIwB,EACF,OAAOA,EAET,EAAM1I,KAAK6K,GAAMd,OAGnB,YADAsG,GAAK,GAIP,GAAW,WAAPtK,EAAiB,CACnB,MAAM,EAAQsJ,GAAQ7I,EAAK0B,SACrByJ,EAAkB,WAAP5L,EACf6L,EAAgB,SAAP7L,EACT8L,EAAiB,UAAP9L,EACN+L,EAAkB,GACxB,IAAI3N,EAAQ,EACZ,QAAS+C,EAAI,EAAG4D,EAAM,GAAI,GAAQ5D,EAAI4D,IAAO5D,EAAG,CAC9C,MAAMwB,EAASyI,EAAQ,CAAC,EAAMjK,MAAOV,IACrC,GAAIkC,EACF,OAAOA,EAET,MAAM,EAAI/C,EAAMkF,GAAMd,OACtB,GAAI8H,EACF1N,GAAS,EAAI,EAAI,UACRyN,GACT,GAAI,EAEF,YADA/G,GAAM7K,KAAK,EAAMkH,SAGV,IAAMyK,GACfG,EAAS9R,KAAK,EAAMkH,IAGxB,OAAQnB,GAAA,IACD,QAEH,YADAoK,GAAKhM,GACL,IACG,OAEH,YADAoM,KAIJ,YADAF,GAAKyB,GAGP,MAAMC,EAAWvL,EAAKuD,MACtB,IAAK,GAAI,CAAC,MAAO,OAAQ,OAAQgI,EAASnM,GACxC,OAAOmL,EACL,uDACE3L,EAAU2M,EAASnM,MAIzB,MAAMoM,EAAQ3C,GAAQ0C,GAEtB,IAAK,GAAIC,GAMP,YALI,GAAIxL,GACNqE,GAAM7K,KAAKwG,EAAK,IAEhB6J,MAIJ,GAAI,GAAI2B,GAAS,IAAM,GAAIxL,GAEzB,YADA,GAAKqE,GAAOmH,GAId,IAAIC,GAAkB,GAAIzL,GAAQA,EAAOwL,GAAO9J,QAChD,QAAShB,EAAI,EAAG4D,EAAM,GAAIkH,GAAQ9K,EAAI4D,IAAO5D,EAAG,CAC9C,MAAMwB,EAASyI,EAAQ,CAACc,EAAWD,EAAM9K,KACzC,GAAIwB,EACF,OAAOA,EAETuJ,EAAYpH,GAAMd,MAGpB,YADAc,GAAM7K,KAAKiS,GACX,IAEG,SAAU,CACb,MAAMC,EAAW1L,EAAK0B,QAChBiK,EAAgB,GAChBhO,EAAQlD,GAAIuF,EAAK,IACvB,GAAIrC,EAAQuM,EAAI0B,YACd,MAAO,CAAC,CAAE/L,EAAG,SAAUC,EAAG,4BAA6BL,OAAAA,IAGzD,GADAyK,EAAI0B,aAAejO,EACA,SAAf+N,EAAStM,GAA+B,QAAfsM,EAAStM,EAAa,CACjD,MAAMuL,EAAUV,GAAOC,EAAKwB,EAAUjM,GACtC,QAASiB,EAAI,EAAGA,EAAI/C,IAAS+C,EAAG,CAC9B,MAAMwB,EAASyI,EAAQ,CAAC,CAAEvL,EAAG,MAAOC,EAAGqB,KACvC,GAAIwB,EACF,OAAOA,EAETyJ,EAAOnS,KAAK6K,GAAMd,aAGpB,QAAS7C,EAAI,EAAGA,EAAI/C,IAAS+C,EAC3BiL,EAAOnS,KAAKkS,GAIhB,YADA7B,GAAK8B,GACL,IAEG,KACHtH,GAAM7K,KAAKwG,EAAK0B,SAChB,QAAShB,EAAI,EAAGhJ,EAAM,GAAIsI,GAAOU,EAAIhJ,IAAOgJ,EAAG,CAC7C,MAAMwB,EAAS+H,GAAOC,EAAKlK,EAAKU,GAAIjB,EAArBwK,CAA6B,CAAC5F,GAAMd,QACnD,GAAIrB,EACF,OAAOA,EAGX,WAEG,eACA,OACH,CACE,MAAMyB,EAAQ,GAAI3D,IACX,EAAG,GAAK,CACb2D,EAAQ,EAAI,EAAIlJ,GAAIuF,EAAK,IACf,IAAV2D,EACI,EAAI,GAAa,aAAPpE,GAEV9E,GADU,IAAVkJ,EACI3D,EAAK,GACLA,EAAK,KAEf2J,GAAY,aAAPpK,EAAoB,GAAQ,EAAG,GAAK,GAAQ,EAAG,IAEtD,WACG,SACA,MAEH,YADA8E,GAAM7K,KAAY,OAAP+F,EAAcS,EAAKuD,MAASvD,EAAK0B,SAC5C,IACG,QACA,SACA,MAAO,CACV,MAAMiJ,EAAUV,GAAOC,EAAKlK,EAAK0B,QAAUjC,GAC3C,GAAW,MAAPF,EACF,OAAOoL,EAAQ3K,GAEjB,IAAI6L,EAAkB7L,EACtB,GAAW,OAAPT,EACFsM,EAAW,GAAK7L,EAAK3C,KAAI,GAAc,QAAR,EAAE+B,EAAc,EAAEC,EAAI,CAAC,UACjD,CACL,MAAM,EAAIwM,EAAStI,MACnB,GAAKsI,EAAU,GAAK,CAAS,QAAR,EAAEzM,EAAc,EAAEC,EAAI,CAAC,MAE9C,OAAOsL,EAAQkB,GAAA,IAEZ,OACH,GAAkB,QAAd7L,EAAK,GAAGZ,EACVyK,GAAK,GAAO7J,EAAK,GAAGX,EAAGwJ,GAAQ7I,EAAK,WAEpC,GAAkB,QAAdA,EAAK,GAAGZ,EACViF,GAAM7K,KACJsP,GAAO,GAAO,GAAKD,GAAQ7I,EAAK,IAAI3C,IAAIH,KAAO8C,EAAK,GAAGX,SAEpD,CACL,MAAM,KAAEnE,EAAI,KAAE8C,GAASkK,GAAIlI,EAAK,IAC1B8L,EAAK5D,GAAIlI,EAAK,IACpB8J,GAAK,CAAE5O,KAAM,GAAOA,EAAM4Q,EAAG5Q,MAAO8C,KAAM,GAAOA,EAAM8N,EAAG9N,QAG9D,WAEG,OACH,GAAkB,QAAdgC,EAAK,GAAGZ,EAAa,CACvB,MAAMC,EAAIW,EAAK,GAAGX,EAClB,GAAI,GAAIW,GAAQ,EACd6J,GAAK,GAAOxK,EAAG,CAACW,EAAK,UAChB,CACL,MAAM6F,EAAIpL,GAAIuF,EAAK,IACnB6J,GAAK,GAAO,GAAO,GAAMxK,EAAG,EAAGwG,GAAI,CAAC7F,EAAK,KAAM,GAAMX,EAAGwG,WAGtD,GAAI7F,GAAQ,EACdqE,GAAM7K,KDvbQ,GAAG0B,KAAAA,EAAM8C,KAAAA,GAAc1H,KAC7C,MAAO+S,EAAOC,GAAS,CAAC/R,EAAM2D,GAAO3D,EAAMyG,IACrCxF,EAAM0C,EAAKmF,WAAUuI,GAAKR,GAAQQ,EAAGtS,KAK3C,OAJa,IAATkC,IACFb,EAAO0R,EAAO7Q,EAAK,GACnBb,EAAO2R,EAAO9Q,EAAK,IAET,CAAE4G,EAAG,OAAQC,EAAS,CAAEnE,KAAMmO,EAAOrL,KAAMsL,KCgbpCyC,CAAS7D,GAAIlI,EAAK,IAAKA,EAAK,KAEvC8J,GAAKV,GAAQlB,GAAIlI,EAAK,IAAKA,EAAK,GAAIA,EAAK,KAG7C,WAEG,OAAQ,CACX,MAAMX,EAAIW,EAAK,GACTgM,EAAe,QAAR3M,EAAED,EAAc,GAAIC,EAAEA,GAAK,GAAKrH,GAAIqH,IACjD,IAAI,EAAI,EACN,EAAI2M,EACN,OAAQ,GAAIhM,IAAA,KACL,EACH,EAAI,EACJ,WACG,EAAG,CACN,MAAMiM,EAAMxR,GAAIuF,EAAK,IACjBiM,EAAM,EACR,GAAKA,EAEL,GAAKA,EAEP,WAEG,EAAG,CACN,MAAMC,EAAOzR,GAAIuF,EAAK,IAChBmM,EAAO1R,GAAIuF,EAAK,IACtB,EAAIkM,EAAO,EAAIF,EAAOE,GAAQC,EAAO,EAAIA,EAAO,GAAK,EAAID,EACzD,GAAKC,EAAO,EAAI,EAAI,GAAKA,EACzB,OAKJ,OAFA,EAAI,GAAI,EAAG,GACX,EAAI,GAAI,EAAGH,GACP,EAAI,OACG,QAAR3M,EAAED,EAAcyK,GAAOD,WAGd,QAARvK,EAAED,EACJyK,GAAK,GAAMxK,EAAEA,EAAG,EAAG,IAEnBuK,GAAK,GAAO5R,GAAIgI,EAAK,IAAK,EAAG,EAAI,KAEnC,IAEG,UAMH,YALkB,QAAdA,EAAK,GAAGZ,EACVwK,GAAKtB,GAAU,GAAQO,GAAQ7I,EAAK,OAEpC6J,GAAK,GAAQhB,GAAQ7I,EAAK,OAE5B,IACG,OAAQ,CACX,MAAMoM,EAAMvD,GAAQ7I,EAAK,IACzB,IAAK,GAAIoM,GAEP,YADAvC,KAGF,MAAMwC,EAAkB,GACxB,GAAkB,IAAd,GAAIrM,GACN,GACEqM,EACAD,EAAI/O,KAAIgC,GAAK,CAACA,EAAGA,UAEd,CACL,MAAMsL,EAAUV,GAAOC,EAAKlK,EAAKuD,MAAQ9D,GACzC,QAASiB,EAAI,EAAG4D,EAAM,GAAI8H,GAAM1L,EAAI4D,IAAO5D,EAAG,CAC5C,MAAMwB,EAASyI,EAAQ,CAACyB,EAAI1L,KAC5B,GAAIwB,EACF,OAAOA,EAETmK,EAAO7S,KAAK,CAAC4S,EAAI1L,GAAI2D,GAAMd,SAG/B,MAAM+I,EAAMD,EAAO,GAAG,GAAGjN,EACzB,OAAIiN,EAAOzL,MAAK,EAAEmI,GAAK3J,MAASA,IAAMkN,IAAQ,GAAI,CAAC,MAAO,OAAQlN,KACzDmL,EAAK,8CAES,QAAnB8B,EAAO,GAAG,GAAGjN,EACf,GAAOiN,GAAQ,EAAEhV,EAAG,IAAK0B,EAAG,KAAQ0B,GAAI,GAAKA,GAAI,GAAK,GAAK,IAE3D,GAAO4R,GAAQ,EAAEhV,EAAG,IAAK0B,EAAG,KAAQf,GAAI,GAAKA,GAAI,GAAK,GAAK,SAE7D6R,GAAKwC,EAAOhP,KAAI,EAAEgC,KAAOA,MACzB,IAEG,QAAS,CACZ,MAAO,EAAG,EAAG3G,GAAKsH,EAAK3C,IAAI5C,IACrB8R,EAAW7T,GAAKA,EAAI,GAAK,EAAI,GAC5BrB,EAAG0B,GACR,GAAIiH,GAAQ,EAAKuM,EAAW,CAAC,EAAI,EAAG,EAAI,GAAK,CAAC,EAAG,GAAM,CAAC,EAAG,GACvDC,EAAO,IAAMzT,EAAI1B,IAAMqB,GAAK,KAAOA,GAAK,GACxCiF,EAAQ,GAAK,IAAK5E,EAAI1B,GAAKmV,IACjC,IAAK7O,EAEH,YADAkM,GAAK,IAGP,GAAIlM,EAAQuM,EAAI0B,YACd,MAAO,CAAC,CAAE/L,EAAG,SAAUC,EAAG,4BAA6BL,OAAAA,IAEzDyK,EAAI0B,aAAejO,EACnB,MAAM8O,EAAO,GAAM9O,GAAON,KAAIwI,GAAKA,EAAI2G,EAAOnV,IAE9C,YADAwS,GAAK4C,EAAKpP,KAAIgC,IAAU,CAAED,EAAG,MAAOC,EAAAA,OACpC,IAEG,SAEH,YADAqK,IAAM,GAAIb,GAAQ7I,EAAK,MACvB,IACG,WACA,OAEH,YADA6J,GAAK3B,GAAIlI,EAAK,IAAW,SAAPT,EAAgB,OAAS,SAC3C,IACG,QAMH,YALAsK,GACE7R,GAAIgI,EAAK,GAAIA,GAAQ,IAClB7B,MAAM,GAAI6B,GAAQ,EAAIhI,GAAIgI,EAAK,IAAM,KACrC3C,KAAIgC,IAAU,CAAED,EAAG,MAAOC,EAAAA,OAE/B,IACG,OAEH,YADAuK,GAAKf,GAAQ7I,EAAK,IAAI3C,IAAImL,IAASpK,KAAKpG,GAAIgI,EAAK,MACjD,IACG,mBACA,aAEH,YADA0J,IAAa,iBAAPnK,EAAwB,GAAS,IAAMvH,GAAIgI,EAAK,IAAKhI,GAAIgI,EAAK,MACpE,IACG,iBACA,iBACA,WACA,iBACA,WAYH,YAXA4J,IACU,eAAPrK,EACG,GACO,eAAPA,EACA,GACO,SAAPA,EACA,GACO,eAAPA,EACA,GACA,IAASvH,GAAIgI,EAAK,MAExB,IACG,OAAQ,CACX,MAAMyB,EAAOzJ,GAAIgI,EAAK,IAMtB,YALA4J,GACE,GAAM,GAAI,GAAKnP,GAAIuF,EAAK,KAAM,IAC3B3C,KAAIwI,GAAKpE,IACTrD,KAAK,KAEV,IAEG,YACH,GAAkB,QAAd4B,EAAK,GAAGZ,EAAa,CACvB,MAAMyG,EAAI,GAAI7F,GAAQ,EAAIvF,GAAIuF,EAAK,IAAM,EACnCtH,EAAIV,GAAIgI,EAAK,IACf,GAAKtH,IAAMmN,GAAKA,EAAI,EACtBkE,KAEAJ,GAAK,GAAS,GAAOjR,EAAGmN,UAG1B+D,GAAK,GAASnP,GAAIuF,EAAK,MAEzB,WAEG,OAEH,YADA2J,GAAK,MACL,IACG,UAEH,YADAA,GAttBwB,UAutBxB,IACG,QAEH,YADAC,GFzUC,SACL8C,EAMAC,GAAQ,GAER,MAAMC,EAKA,GACN,QAASxN,EAAI,EAAGA,EAAIvH,EAAI0G,MAAUa,EAAG,CACnC,MAAM,KAAEiD,EAAI,KAAEuC,EAAI,IAAEnC,EAAG,IAAEwF,GAAQ1J,GAAMa,GACjCwI,EAAe,CACnBzK,KAAM,IAAI0P,IACV7E,OAAQ,IAEJ8E,EAAW,CAAEhG,MAAO,GAAIiG,KAAM,IAC9BC,EAAY5R,IACZ6R,EAAYP,EAChB,CACE/V,IAAML,GAAgBK,GAAIiR,EAAOtR,GACjCwR,IAAK,CAACxR,EAAa4H,IAAa4J,GAAIF,EAAOtR,EAAK4H,GAChD5B,MAAMtE,EAAKkV,GACTtF,EAAMI,QAAUhQ,GAAOkV,EAAc,KAAO,KAE9CnF,IAAK,CAAC,EAAc/H,IAAgB+H,GAAIH,EAAO,EAAM5H,GACrDmN,UAAW,GACXL,IAAAA,EACA/B,WAAY,IACZa,YAAa,IACbwB,WAAY,IACZC,YAAa,KAEfzI,EACAA,GACA,GAEI1C,EAA4B,WAAnB+K,EAAUpF,KAAoBoF,EAAU/K,OAAS,GAC1DoL,GAAS7K,GAAO,IAAIrE,SAAW8D,EAAO7E,KAAI,EAAGwC,KAAQA,IAAGzB,OACxDmP,GAAStF,GAAO/N,EAAK0N,EAAMI,UAAYC,EACvCuF,EAAYpS,IAAc4R,GACzBS,EAAMC,EAAOC,EAAUC,EAASC,GAAW,CAChDxT,EAAO,GAAG+E,EAAI,IAAK,GACnB/E,EAAOgI,EAAM,IACbhI,EAAO,GAAGmT,MAAe,GACzBD,GAAStF,EAAM,SAAW/N,EAAK0N,EAAMI,QACrCsF,GACEpL,EAAO7E,KACL,EAAGwC,EAAGC,EAAAA,EAAGL,QAAU+F,KAAAA,EAAMC,IAAAA,MAAY,GAAG5F,KAAK2F,KAAQC,MAAQ3F,OAGnE8M,EAAQpT,KAAK,CACX8T,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAM,QAAS,GAAGL,KAAQC,KAASC,KAAYC,KAAWC,MAGxD,MAAME,EAAUnB,EAAQrP,QAAO,CAACkN,GAAO+C,UAAAA,KAAgB/C,EAAM+C,GAAW,GAClEQ,EAAYnW,EAAI+U,EAAQpP,QAAO,EAAG+P,MAAAA,EAAOD,MAAAA,KAAYC,GAASD,KACpE,OAAOjU,EACLuT,EAAQpP,QAAOqD,IAAM8L,IAAU9L,EAAE0M,QAAU1M,EAAEyM,QAAOjQ,KAAIwD,GAAKA,EAAEiN,UAC/D,CAAC,QAAQE,KAAanW,EAAI+U,sBAA4BmB,SEsQ/CE,CAAQvB,KAAU,GAAI1M,IAASb,EAAMa,EAAK,MAAM5B,KAAK,OAC1D,IACG,UAEH,YADAyL,GAsiBC,SAAiBK,EAAUgE,GAAa,GAC7C,IAAIC,EAAOD,EAAa,CAAC,WAAY,MAAO,MAAO,KAAM,MAAO,SAAW,GAC3E,GAAKC,EAAM,CAAC,OAAQ,KAAM,MAC1BA,EAAO,GAAOA,EAAM,GAAQ9R,IAC5B8R,EAAO,GAAOA,EAAM,GAAQjE,EAAI4C,IAAIhG,QACpCqH,EAAO,GAAOA,EAAM,GAAQjE,EAAI4C,IAAIC,OACpC,MAAMqB,EAAS,CAAC,SAEhB,OADAD,EAAOA,EAAK3Q,QAAOjH,IAAM,GAAI6X,EAAQ7X,KAC9B,GAAO4X,GAAM,CAAC7U,EAAGC,IAAOD,EAAIC,EAAI,GAAK,IA9iBnCiF,CAAQ0L,GAAK,GAAO7M,KAAIgC,IAAM,CAAED,EAAG,MAAOC,EAAAA,OAC/C,IACG,OAAQ,QACJ6K,EAAI4C,IAAIhG,MAAa,MAC5B,MAAMuH,EAAO,GAAIhK,IACXQ,EAAW,GAAGpF,EAAOoF,gBACrB3C,EAASoM,GAAYpE,EAAKlS,GAAIgI,EAAK,IAAK6E,GAC9C,OAAI3C,EACK,CACL,CAAErC,EAAG,OAAQC,EAAG,8BAA+BL,OAAAA,MAC5CyC,QAGHmM,IAAS,GAAIhK,KACf0F,MAEF,IAEG,QAEH,YADAP,GAAYxJ,GACZ,IACG,QAKH,OAJAkK,EAAI4C,IAAIC,KAAO,GACf7C,EAAI4C,IAAIhG,MAAQ,GAChB2C,GAAO,QACPM,KAIJ,MAAO,CAAC,CAAElK,EAAG,aAAcC,EAAG,0BAA2BL,OAAAA,IA4B3B8O,CAAMlM,EAAMjF,EAAQ8M,EAAKzK,EAAQ0K,GAEzD9H,KAAQ6H,EAAI4C,IAAIhG,MACV1J,GAAkBoR,GAAQtE,EAAKA,EAAI4C,IAAIhG,MAAMzE,GAAOjF,GAE1DiF,KAAQ6H,EAAI4C,IAAIC,KACX9C,GAAOC,EAAKA,EAAI4C,IAAIC,KAAK1K,GAAO5C,GAErC4C,KAAQoH,GAAK,GAAIA,IAAQ,GACpBQ,GAAOC,EAAKT,GAAK,GAAIA,IAAQ,GAAGpH,GAAO5C,GAE5C,GAAO4C,EAAM,KACPjF,IACN,IAAK,GAAIA,GACP,OAAOgN,EAET,MAAM3H,EAAMyH,EAAIpC,IAAI,GAAOzF,EAAM,GAAIjF,EAAO,IAE5C,OADAiH,GAAM7K,KAAK4D,EAAO,IACXqF,EAAM,CAAC,CAAE5C,EAAG,WAAYC,EAAG2C,EAAKhD,OAAAA,SAAY,GAG/CrC,IACN,MAAMqR,EAAYvE,EAAInC,IAAI1F,EAAMjF,GAChC,GAAuB,QAAnBqR,EAAU5G,KAId,MAAO,CAAC,CAAEhI,EAAG,WAAYC,EAAG2O,EAAUhM,IAAKhD,OAAAA,IAHzC4E,GAAM7K,KAAKiV,EAAUtX,QAGoB,GAE3B,QAAToI,EAAGH,EACZ,OAAQhC,GAAkBoR,GAAQtE,EAAK3K,EAAGF,EAAGjC,GAAA,GAC3B,QAATmC,EAAGH,EACZ,OAAQhC,IACN,IAAK,GAAIA,GACP,OAAOgN,EAET,GAAoB,SAAhBhN,EAAO,GAAGgC,EACZiF,GAAM7K,KAAK2P,GAAQjB,GAAI9K,EAAO,IAAKmC,QAAA,IACV,QAAhBnC,EAAO,GAAGgC,EAInB,OAAO2B,GAAStB,EAAQ,CAACrC,EAAO,GAAGgC,IAJH,CAChC,MAAMsP,EAAQxR,GAAIE,EAAO,IAAIM,MAAK2B,GAAK+I,GAAQ/I,EAAGE,KAClD8E,GAAM7K,KAAKkV,GAAS,CAAEtP,EAAG,OAAQC,OAAG,OAItC,GAEgB,QAATE,EAAGH,EAAa,CACzB,MAAMyG,EAAI,GAAMtG,EAAGF,GACnB,OAAQjC,IACN,IAAK,GAAIA,GACP,OAAOgN,EAET,MAAM9Q,EAAI8D,EAAO,GACjB,GAAY,QAAR9D,EAAE8F,GAAuB,QAAR9F,EAAE8F,GAAuB,SAAR9F,EAAE8F,EACtC,OAAO0B,GAASrB,EAAQ,CAACnG,EAAE8F,IAE7B,MAAM5H,EAAMqR,GAAQvP,GAChB,GAAIuM,IAAM,GAAIrO,GAChBuS,KACSlE,EAAI,EACbxB,GAAM7K,KAAKhC,EAAI,GAAIA,GAAOqO,IAE1BxB,GAAM7K,KAAKhC,EAAIqO,KAEjB,GAEgB,QAATtG,EAAGH,EAAa,CACzB,MAAM,EAAEC,GAAME,EACd,OAAQnC,IACN,IAAK,GAAIA,GACP,OAAOgN,EAET,MAAMsE,EAAQrP,EAAE3B,MAAKQ,GAAOkK,GAAQlK,EAAKd,EAAO,MAC5CsR,EACFrK,GAAM7K,KAAKkV,GAEX3E,MAEF,GAEgB,SAATxK,EAAGH,EAAc,CAC1B,MAAMjC,EAAOoC,EAAGF,EAChB,OAAQjC,IACN,GAAoB,IAAhB,GAAIA,GACNiH,GAAM7K,KAAK2P,GAAQhM,EAAMC,EAAO,aACP,IAAhB,GAAIA,GAGb,MAAO,CACL,CACEyC,EAAG,QACHC,EAAG,0DACHL,OAAAA,IANJqK,GAAKV,GAAQjM,EAAMC,EAAO,GAAIA,EAAO,OAUvC,GAEgB,SAATmC,EAAGH,EAAc,CAC1B,MAAM2D,EAAOxD,EAAGF,EAChB,OAAQjC,IACN,IAAK,GAAIA,IAAW,GAAIA,GAAU,EAChC,MAAO,CACL,CACEyC,EAAG,QACHC,EAAG,uDACHL,OAAAA,IAIN4E,GAAM7K,KACJuJ,EACI3F,EAAO,GACP,GAAIA,GAAU,EACdA,EAAO,GACP,CAAEgC,EAAG,OAAQC,OAAG,KAK1B,OAAO0J,GAAK,CACV,CAAElJ,EAAG,YAAaC,EAAG,GAAG0I,GAAQjJ,6BAA+BE,OAAAA,IAInE,SAAS,GAAayC,GACpB,MAAMyM,EAAS,CAAC1D,EAASrC,EAAWvJ,IAClC+J,GAAQ6B,EAAG,CAAE7L,EAAG,MAAOC,EAAGuJ,GAAKvJ,GACjC,OAAO6C,EAAO7E,KAAI,EAAGwC,EAAGC,EAAAA,EAAGL,OAAAA,MACzB,IAAItC,EAAOwR,EAAO,CAAEzT,KAAM,GAAI8C,KAAM,IAAM,KAAM,CAAEoB,EAAG,MAAOC,EAAGQ,IAI/D,OAHA1C,EAAOwR,EAAOxR,EAAM,KAAM,CAAEiC,EAAG,MAAOC,EAAGS,IACzC3C,EAAOwR,EAAOxR,EAAM,QAAS,CAAEiC,EAAG,MAAOC,EAAGI,EAAO+F,OACnDrI,EAAOwR,EAAOxR,EAAM,OAAQ,CAAEiC,EAAG,MAAOC,EAAGI,EAAOgG,MACtC,CAAErG,EAAG,OAAQC,EAAGlC,MAIhC,SAAS6G,GAAShE,EAAa4O,GAC7B,IAAIpX,EAAawI,EACjB,QAAS1G,EAAI,EAAGC,EAAI,GAAIqV,GAAS,EAAGtV,EAAIC,IAAKD,EAAG,CAC9C,MAAM4E,EAAM1G,EAAIoX,EAAMtV,IACtB,GAAc,QAAV4E,EAAIkB,EACI,MACS,QAAVlB,EAAIkB,GAAe9F,EAAI,IAAMC,GAAKqV,EAAMtV,EAAI,GAAK,GAAK4E,EAAImB,GAC5D,CAAED,EAAG,MAAOC,EAAG,GAAOnB,EAAImB,EAAGuP,EAAMtV,EAAI,KAEvC,CAAE8F,EAAG,OAAQC,OAAG,GAJvB7H,EAAM0G,EAAImB,EAOd,MAAMwP,EAAMD,EAAM,GAAIA,GAAS,GAC/B,OAAOC,GAAO,GAAIrX,GAAO,CAAE4H,EAAG,OAAQC,OAAG,GAAc7H,EAAIqX,GAG7D,SAASL,GACPtE,EACAlL,EACAgB,EACA8O,GAAY,KAEV5E,EAAIkD,WACD0B,GACHrF,GAAKjQ,KAAK,IAEZ,MAAMuV,EAAW,GAAI1K,IACrB,QAAS3D,EAAI,EAAG4D,EAAM,GAAItF,EAAK+C,KAAMrB,EAAI4D,IAAO5D,EAAG,CACjD,MAAMqB,EAAM/C,EAAK+C,IAAIrB,IACf,OAAEjB,GAAWT,EAAK+C,IAAIrB,GAEtBsO,EAAe9E,EAAIa,WAAa,EACtC,GAAIiE,GAAgB9E,EAAIkD,WAAa,EACnC,MAAO,CACL,CACEvN,EAAG,SACHC,GAAMkP,EAAe,SAAW,UAA7B,kBACHvP,OAAAA,IAKN,OAAQsC,EAAIZ,KAAA,IACL,MACHkD,GAAM7K,KAAKuI,EAAI5K,OACf,UACG,MACH+S,EAAI4C,IAAIC,KAAKhL,EAAI5K,OAASkN,GAAM,GAAIA,IAAS,GAC7C,UACG,MACHoF,GAAK,GAAIA,IAAQ,GAAG1H,EAAI5K,OAASkN,GAAM,GAAIA,IAAS,GACpD,UACG,UACA,MAAO,CACV,MAAM4K,EAAclN,EAAI5K,MAClB+G,EAAMmG,GAAMd,MAClB,IAAIW,EACJ+K,EAAY7M,SAAQ,EAAGC,KAAAA,EAAME,SAAAA,MAEzB2B,EADc,QAAZnC,EAAIZ,IACC+I,EAAI4C,IAAIC,KAAK1K,GAAQ2B,GAAS,CAAC9F,GAAMqE,GAErCkH,GAAK,GAAIA,IAAQ,GAAGpH,GAAQ2B,GAAS,CAAC9F,GAAMqE,MAGvD8B,GAAM7K,KAAK0K,GACX,UAEG,UACA,MAAO,CACV,MAAMgL,EAAWnN,EAAI5K,OACH,IAAd+X,EACFrF,GAAK7J,GACI,GAAIA,IAASkP,EACtBnF,KAEA1F,GAAM7K,KAAKwG,EAAKkP,IAElB,UAEG,MACH7K,GAAM7K,KAAKwK,GAAShE,EAAM+B,EAAI5K,QAC9B,UACG,MAAO,CACV,MAAMkL,EAAON,EAAI5K,MACjB,GAAIkF,EAAIgG,GACN2H,GAAK3H,QAAA,GACI,GAAOA,EAAM,KAAM,CAC5B,MAAMoM,EAAYvE,EAAIvT,IAAI,GAAO0L,EAAM,IACvC,GAAuB,QAAnBoM,EAAU5G,KACZ,MAAO,CAAC,CAAEhI,EAAG,WAAYC,EAAG2O,EAAUhM,IAAKhD,OAAAA,IAE7C4E,GAAM7K,KAAKiV,EAAUtX,YAAA,GACZkL,KAAQ6H,EAAI4C,IAAIC,KACzB1I,GAAM7K,KAAK0Q,EAAI4C,IAAIC,KAAK1K,SAAA,GACfA,KAAQoH,GAAK,GAAIA,IAAQ,GAClCpF,GAAM7K,KAAKiQ,GAAK,GAAIA,IAAQ,GAAGpH,QAAA,MACtBA,KAAQ6H,EAAI4C,IAAIhG,OAGzB,MAAO,CAAC,CAAEjH,EAAG,YAAaC,EAAG,IAAIuC,mBAAuB5C,OAAAA,IAFxDuK,GAAK3H,GAIP,UAEG,MAAO,CACV,MAAMsI,EAAUV,GAAOC,EAAK7F,GAAMd,MAAQ9D,GAAQ,GAC5CkE,EAAQ5B,EAAI5K,MAEZ+K,EAASyI,EADA,GAAOtG,GAAO,GAAIA,IAASV,EAAOA,IAEjD,GAAIzB,EAAQ,CAEV,MAAMiN,EAAU,GAAMnQ,EAAK+C,IAAKrB,GAAGL,WACjC,GAAmB,QAAZ,EAAIc,MAEb,IAAiB,IAAbgO,EAAgB,CAClBzO,GAAKyO,EACL1F,GAAK,GAAIA,IAAQ,GAAW,OAAI,CAC9BrK,EAAG,MACHC,EAAG,GAAa6C,IAElB,MAEF,OAAOA,EAET,GAAIsH,GAAW,CAOb,GANAC,GAAK,GAAIA,IAAQ,GAAK,GACtB/I,GAAK,EACSqB,EAAI5K,MAClB6I,EAAOwJ,GACPA,QAAY,IACVU,EAAImD,aACDnD,EAAImD,YACP,MAAO,CAAC,CAAExN,EAAG,SAAUC,EAAG,0BAA2BL,OAAAA,IAEvD,MAEF,UAEG,KACCN,EAAMkF,GAAM,GAAIA,IAAS,IAC3B3D,GAAKqB,EAAI5K,MAETkN,GAAMd,MAER,UACG,MAAO,CACV,MAAMjK,EAAI+K,GAAM,GAAIA,IAAS,GACxB+D,GAAQ9O,EAAG+K,GAAMd,OAGpBc,GAAMd,MAFN7C,GAAKqB,EAAI5K,MAIX,UAEG,KACEgI,EAAMkF,GAAMd,SACf7C,GAAKqB,EAAI5K,OAEX,UACG,UACA,MACHuJ,GAAKqB,EAAI5K,MACT,UACG,MACHuJ,GAAKqB,EAAI5K,QACP+S,EAAIa,WACN,UACG,MACH,GAAO1G,GAAO,GAAIA,IAAStC,EAAI5K,MAAO4K,EAAI5K,OAC1C,UACG,MACC4K,EAAI5K,MACN,GAAOkN,GAAO0K,EAAU,GAAI1K,IAAS0K,EAAW,GAEhDhF,KAEFrJ,EAAI4D,EACJ,UACG,UACA,MAAO,CACV,MAAMjC,EAAON,EAAI5K,MAAM,GACvB,IAAIiY,EAAOrN,EAAI5K,MAAM,GACrB,MAAMkY,EAAY,EAAGlO,IAAAA,EAAKhK,MAAAA,GAAc,IAC7B,QAARgK,IACEiO,EAAK1R,MAAK,GAAe,QAAV,EAAEyD,KAAiB,EAAEhK,QAAUA,KACzC,QAARgK,GACS,QAARA,GAAiB,EAAI,IAAM,GAAIiO,IAA6B,QAApBA,EAAK,EAAI,GAAGjO,IACjDmO,EAAkB,CACtBjN,KAAM,GACNN,IAAKqN,EACF/R,KAAI,CAAC,EAAK,KACT,GAAI,EAAI,IAAM,GAAI+R,GAChB,OAAO,EAET,MAAMG,EACQ,QAAZ,EAAIpO,KACY,QAAhB,EAAIhK,MAAMiI,GACU,QAApBgQ,EAAK,EAAI,GAAGjO,KACZsI,GAAK,GAAIA,IAAQ,GAAG,EAAItS,MAAMkI,GAChC,OAAOkQ,EACE,CAAEpO,IAAK,MAAOhK,MAAOoY,GAC1B,KAEL/R,OAAO6R,IAENnN,EAASsM,GAAQtE,EAAKoF,EAAWtP,GAAM,GAC7C,GAAIkC,EACF,OAAOA,EAET,MAAMsN,EAAS,GAAIF,EAAUvN,KACvB0N,EAAW,GAAOpL,GAAO,GAAIA,IAASmL,EAAQA,GAOpD,GANAJ,EAAOA,EAAK/R,KAAI,CAAC,EAAK,IACpBgS,EAAU,EAAK,GACN,CAAElO,IAAK,MAAOhK,MAAOsY,EAAS/N,QAAUjC,OAAAA,GAC7C,IAGU,QAAZsC,EAAIZ,IAAe,CACrB,MAAQhK,MAAOuY,EAAYjQ,OAAA,GAAW2P,EAAK7L,MAE3C,GAAI,GAAI6L,GAAQ,GAAiC,QAA5BA,EAAK,GAAIA,GAAQ,GAAGjO,IAAe,CACtD,MAAMwO,EAAeP,EAAK/O,WAAU,GAAe,QAAV,EAAEc,MACrCqB,EAAO,GAAO4M,EAAMO,EAAc,GAAIP,GAAQO,GACpD,GAAKnN,EAAM4M,GACXA,EAAO5M,OAEP4M,EAAKjN,QAAQiN,EAAK7L,OAEpB6L,EAAK5V,KAAK,CAAE2H,IAAK,MAAOhK,OAAQ,EAAGsI,OAAA,IACnC2P,EAAK5V,KAAK,CACR2H,IAAK,MACLhK,MAAY,CAAEiI,EAAG,MAAOC,EAAG,OAC3BI,OAAA,IAEF2P,EAAK5V,KAAK,CAAE2H,IAAK,MAAOhK,MAAeuY,EAAa,EAAGjQ,OAAA,IAEzD4E,GAAM7K,KAAU,CAAE4F,EAAG,MAAOC,EAAS,CAAEgD,KAAAA,EAAMN,IAAKqN,KAClD,QAQDN,IACHrF,GAAKlG,MACL,GAAOc,GAAO0K,EAAU,GAAI1K,KAAU0K,EAAW,KAKrD,SAAST,GACPpE,EACAtF,EACAC,GAEA,MAAM+K,EAASjL,GAAMC,EAAMC,GAC3B,OAAI,GAAI+K,EAAO1N,QACN0N,EAAO1N,QAEhBgI,EAAI4C,IAAIhG,MAAQ,IAAKoD,EAAI4C,IAAIhG,SAAU8I,EAAO9I,OACxC,UAAWoD,EAAI4C,IAAIhG,MAGlB0H,GAAQtE,EAAKA,EAAI4C,IAAIhG,MAAa,MAAG,SAH5C,GAgCK,SAAS4F,GACdxC,EACAtF,EACAC,EACAgL,GAAc,GAEd,MAAM,WAAEzC,EAAU,WAAErC,EAAU,YAAEsC,EAAW,YAAEzB,GAAgB1B,EACpCA,EAAIiD,UAhCnB/K,SAAQ,EAAGC,KAAAA,EAAMhM,WAAAA,EAAYyZ,QAAAA,MACrC,GAAIzT,EAAIgG,KAAUkH,GAAYlH,GAC5B,KAAM,gDAERhG,EAAIgG,GAAQ,IAAKhM,EAAYgU,UAAU,GACvCd,GAAYlH,GAAQyN,KA4BtB,MAAM5N,EAASoM,GAAYpE,EAAKtF,EAAMC,IAxBxC,SAAkCsI,GAChCA,EAAU/K,SAAQ,EAAGC,KAAAA,aACZhG,EAAIgG,UACJkH,GAAYlH,OAsBrB0N,CAAyB7F,EAAIiD,YAC5BjD,EAAIkD,WAAYlD,EAAImD,aAAe,CAACD,EAAYC,IAChDnD,EAAIa,WAAYb,EAAI0B,aAAe,CAACb,EAAYa,UAC1C1B,EAAI4C,IAAIhG,MAAa,MAC5B,MAAM3P,EAAQkN,GAAMd,MAKpB,OAJCc,GAAOoF,IAAQ,CAAC,GAAI,IACjBoG,IAAgB3N,GAAU/K,GAC5B+S,EAAI5N,MAAMkM,GAAQrR,IAAQ,GAErB+K,EACH,CAAE2F,KAAM,SAAU3F,OAAAA,GAClB/K,EACA,CAAE0Q,KAAM,MAAO1Q,MAAAA,GACf,CAAE0Q,KAAM,SChtCd,MAAMmI,GAAc,IAAInD,IACXoD,GAAW,eAEjB,SAASC,GAAQhG,EAAUtF,GAChC,MAAMuL,EAAO/U,IAAYgV,WACzBJ,GAAYlI,IAAIqI,EAAMvL,GACtB,MAAMqI,EAAYP,GAAOxC,EAAKtF,EAAMuL,GAAM,GAC1C,GAAuB,WAAnBlD,EAAUpF,KACZ,MAAO,GAET,IAAII,EAAoB,GAyBxB,OAxBAgF,EAAU/K,OAAOE,SAAQ,EAAGvC,EAAGC,EAAAA,EAAGL,QAAU+F,KAAAA,EAAMC,IAAAA,EAAKZ,SAAAA,OACrD,MAAMwL,EAAaL,GAAYrZ,IAAIkO,GACnC,IAAKwL,EAKH,YAJApI,EAAIzO,KAAK,CACP8W,KAAM,UACN7O,KAAM,GAAG5B,iBAAiB2F,SAAYC,MAAQ3F,QAIlD,MAAMyQ,EAAWF,EAAWlS,MAAM,MAAMqH,EAAO,GACzCgL,EAAMnY,EAAOkY,EAAU9K,EAAM,GAAGtH,MAAM8R,IAAU,GAChDQ,EAAQtW,EAAU9B,EAAOkY,EAAU,EAAG9K,EAAM,IAElD,GADAwC,EAAIzO,KAAK,CAAE8W,KAAM,UAAW7O,KAAMpH,EAAO,GAAGmL,IAAQ,GAAKiL,IACpDD,EAIE,CACL,MAAME,EAAQrY,EAAOkY,EAAU9K,EAAM,EAAI1N,EAAKyY,IAC9CvI,EAAIzO,KAAK,CAAE8W,KAAM,QAAS7O,KAAM+O,IAChCvI,EAAIzO,KAAK,CAAE8W,KAAM,UAAW7O,KAAM,GAAGiP,YAP7B,CACR,MAAMA,EAAQrY,EAAOkY,EAAU9K,GAC/BwC,EAAIzO,KAAK,CAAE8W,KAAM,QAAS7O,KAAM8O,EAAS9K,EAAM,KAC/CwC,EAAIzO,KAAK,CAAE8W,KAAM,UAAW7O,KAAM,GAAGiP,QAMvCzI,EAAIzO,KAAK,CAAE8W,KAAM,UAAW7O,KAAM,GAAG5B,YAAYC,YAE5CmI,E","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = (arr: unknown[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { sourceId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exp\"; value: number } //Marks the start of an expression as head for potential partial closures\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n}\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts-with?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends-with?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { concat, has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype NamedTokens = {\r\n  name: string;\r\n  tokens: Token[];\r\n  errCtx: ErrCtx;\r\n};\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\n\r\nconst depthChange = ({ typ }: Token) => toNum(typ === \"(\") - toNum(typ === \")\");\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  sourceId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const digits = \"0123456789\";\r\n  let inString = false,\r\n    isEscaped = false,\r\n    inStringAt = [0, 0],\r\n    inSymbol = false,\r\n    inNumber = false,\r\n    inHex = false,\r\n    inComment = false,\r\n    line = 1,\r\n    col = 0;\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (inComment) {\r\n      if (c === \"\\n\") {\r\n        inComment = false;\r\n        ++line;\r\n        col = 0;\r\n      } else if (emitComments) {\r\n        tokens[len(tokens) - 1].text += c;\r\n      }\r\n      continue;\r\n    }\r\n    if (isEscaped) {\r\n      isEscaped = false;\r\n      if (inString) {\r\n        tokens[len(tokens) - 1].text +=\r\n          { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[c] || `\\\\${c}`;\r\n      }\r\n      continue;\r\n    }\r\n    if (c === \"\\\\\") {\r\n      isEscaped = true;\r\n      continue;\r\n    }\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({\r\n          typ: \"str\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      inComment = true;\r\n      if (emitComments) {\r\n        tokens.push({\r\n          typ: \"rem\",\r\n          text: \"\",\r\n          errCtx: { sourceId: sourceId, line, col },\r\n        });\r\n      }\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\r\n    const isDigit = (ch: string) => sub(digits, ch);\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const parens: { [ch: string]: Token[\"typ\"] } = {\r\n          \"[\": \"(\",\r\n          \"{\": \"(\",\r\n          \"(\": \"(\",\r\n          \")\": \")\",\r\n          \"}\": \")\",\r\n          \"]\": \")\",\r\n        };\r\n        const text = parens[c]!;\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps) {\r\n          if (c === \"[\") {\r\n            tokens.push({ typ: \"sym\", text: \"vec\", errCtx });\r\n          } else if (c === \"{\") {\r\n            tokens.push({ typ: \"sym\", text: \"dict\", errCtx });\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = false;\r\n      inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\nfunction segment(tokens: Token[]): Token[][] {\r\n  const segments: Token[][] = [[]];\r\n  let depth = 0;\r\n  tokens.forEach(token => {\r\n    segments[len(segments) - 1].push(token);\r\n    depth += depthChange(token);\r\n    if (depth === 0) {\r\n      segments.push([]);\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\nfunction funcise(segments: Token[][]): NamedTokens[] {\r\n  const isFunc = (segment: Token[]) =>\r\n    len(segment) > 1 &&\r\n    segment[1].typ === \"sym\" &&\r\n    segment[1].text === \"function\";\r\n  const funcs = segments.filter(t => isFunc(t));\r\n  const entries = flat(segments.filter(t => !isFunc(t)));\r\n  const described = funcs.map(tokens => ({\r\n    name: tokens[2].text,\r\n    tokens: slice(tokens, 3),\r\n    errCtx: tokens[2].errCtx,\r\n  }));\r\n  return len(entries)\r\n    ? concat(described, [\r\n        {\r\n          name: \"entry\",\r\n          tokens: entries,\r\n          errCtx: entries[0].errCtx,\r\n        },\r\n      ])\r\n    : described;\r\n}\r\n\r\nfunction parseAll(tokens: Token[], params: ParamsShape) {\r\n  const args: ParserIns[][] = [];\r\n  while (true) {\r\n    const arg = parseArg(tokens, params);\r\n    if (!len(arg)) {\r\n      break;\r\n    }\r\n    args.push(arg);\r\n  }\r\n  return args;\r\n}\r\n\r\nfunction parseForm(\r\n  tokens: Token[],\r\n  params: ParamsShape,\r\n  inPartial = true,\r\n): ParserIns[] {\r\n  const head = tokens.shift();\r\n  if (!head) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = head;\r\n  let op = text;\r\n  const err = (value: string, eCtx = errCtx) => [\r\n    <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n  ];\r\n  if (op === \"catch\") {\r\n    if (tokens[0].typ !== \"(\") {\r\n      return err(\"argument 1 must be expression\");\r\n    }\r\n    const body = parseArg(tokens, params);\r\n    const when = flat(parseAll(tokens, params));\r\n    if (!len(body) || !len(when)) {\r\n      return err(\"must provide at least 2 arguments\");\r\n    }\r\n    return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n  } else if (op === \"var\" || op === \"let\") {\r\n    const ins: Ins[] = [];\r\n    while (true) {\r\n      const parsedDestructuring = parseParams(tokens, true);\r\n      if (len(parsedDestructuring.errors)) {\r\n        return parsedDestructuring.errors;\r\n      }\r\n      let def: ParserIns | undefined = undefined;\r\n      if (len(parsedDestructuring.params)) {\r\n        def = {\r\n          typ: op === \"var\" ? \"dva\" : \"dle\",\r\n          value: parsedDestructuring.params,\r\n          errCtx,\r\n        };\r\n      }\r\n      if (!def) {\r\n        [def] = parseArg(tokens, params);\r\n      }\r\n      if (len(ins) && !def) {\r\n        return ins;\r\n      }\r\n      const val = parseArg(tokens, params);\r\n      if (!len(ins) && (!def || !len(val))) {\r\n        return err(`must provide at least one declaration name and value`);\r\n      } else if (!len(val)) {\r\n        return err(`must provide a value after each declaration name`);\r\n      }\r\n      if (def.typ !== \"ref\" && def.typ !== \"dva\" && def.typ !== \"dle\") {\r\n        return [\r\n          <ParserIns>{\r\n            typ: \"err\",\r\n            value: `${op} declaration name must be a symbol`,\r\n            errCtx: def.errCtx,\r\n          },\r\n        ];\r\n      }\r\n      push(ins, val);\r\n      if (def.typ === \"ref\") {\r\n        ins.push({ typ: op, value: def.value, errCtx });\r\n      } else if (def.typ === \"dva\" || def.typ === \"dle\") {\r\n        ins.push({ typ: def.typ, value: def.value, errCtx });\r\n      }\r\n    }\r\n  } else if (op === \"var!\" || op === \"let!\") {\r\n    const ins: Ins[] = [];\r\n    //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n    const defIns = parseArg(tokens, params);\r\n    if (!len(defIns)) {\r\n      return err(`must provide declaration name`);\r\n    }\r\n    const def = defIns[0];\r\n    if (def.typ !== \"ref\") {\r\n      return err(\"declaration name must be symbol\");\r\n    }\r\n    const func = parseArg(tokens, params);\r\n    if (!len(func)) {\r\n      return err(\"must provide an operation\");\r\n    }\r\n    const args = parseAll(tokens, params);\r\n    ins.push({ typ: \"ref\", value: def.value, errCtx });\r\n    push(ins, flat(args));\r\n    push(ins, func);\r\n    ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n    ins.push({ typ: op === \"var!\" ? \"var\" : \"let\", value: def.value, errCtx });\r\n    return ins;\r\n  } else if (op === \"if\" || op === \"if!\" || op === \"when\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const ins: ParserIns[] = cond;\r\n    if (op === \"if!\") {\r\n      ins.push({ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx });\r\n      ins.push({ typ: \"exe\", value: 1, errCtx });\r\n    }\r\n    if (op === \"if\" || op === \"if!\") {\r\n      const ifT = parseArg(tokens, params);\r\n      if (!len(ifT)) {\r\n        return err(\"must provide a branch\");\r\n      }\r\n      ins.push({ typ: \"if\", value: len(ifT) + 1, errCtx });\r\n      push(ins, ifT);\r\n      const ifF = parseArg(tokens, params);\r\n      if (len(ifF)) {\r\n        ins.push({ typ: \"jmp\", value: len(ifF), errCtx });\r\n        push(ins, ifF);\r\n        const extraneousBranch = parseArg(tokens, params);\r\n        if (len(extraneousBranch)) {\r\n          return err(\r\n            \"too many branches; delete this branch\",\r\n            extraneousBranch[0].errCtx,\r\n          );\r\n        }\r\n      } else {\r\n        ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n      }\r\n    } else {\r\n      const body = flat(parseAll(tokens, params));\r\n      ins.push({ typ: \"if\", value: len(body) + 1, errCtx });\r\n      push(ins, body);\r\n      ins.push({ typ: \"jmp\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n    const args = parseAll(tokens, params);\r\n    let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n    if (len(args) < 2) {\r\n      return err(\"requires at least two arguments\");\r\n    }\r\n    const ins: Ins[] = [];\r\n    if (op === \"while\") {\r\n      ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n      insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n      const head = args.shift()!;\r\n      push(ins, head);\r\n      ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n      ins.push({ typ: \"pop\", value: len(args), errCtx });\r\n      args.forEach(as => push(ins, as));\r\n      ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n      return ins;\r\n    }\r\n    insCount += len(args); //+1 for each if/or ins\r\n    insCount += toNum(op === \"and\");\r\n    const typ = op === \"and\" ? \"if\" : \"or\";\r\n    for (let a = 0; a < len(args); ++a) {\r\n      push(ins, args[a]);\r\n      insCount -= len(args[a]);\r\n      ins.push({ typ, value: insCount, errCtx });\r\n      --insCount;\r\n    }\r\n    if (op === \"and\") {\r\n      push(ins, [\r\n        { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: falseVal, errCtx },\r\n      ]);\r\n    } else {\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n    }\r\n    return ins;\r\n  } else if (op === \"match\") {\r\n    const cond = parseArg(tokens, params);\r\n    if (!len(cond)) {\r\n      return err(\"must provide condition\");\r\n    }\r\n    const args = parseAll(tokens, params);\r\n    const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n    if (!len(args)) {\r\n      return err(\"must provide at least one case\");\r\n    }\r\n    let insCount =\r\n      args.reduce(\r\n        (acc, a) => acc + len(a) + 1,\r\n        len(otherwise) ? len(otherwise) - 2 : 0,\r\n      ) + 2;\r\n    const ins: ParserIns[] = cond;\r\n    while (len(args) > 1) {\r\n      const a = args.shift()!;\r\n      const when = args.shift()!;\r\n      push(ins, a);\r\n      ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n      push(ins, when);\r\n      insCount -= len(a) + len(when) + 2;\r\n      ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n    }\r\n    if (len(otherwise)) {\r\n      push(ins, otherwise);\r\n    } else {\r\n      ins.push({ typ: \"pop\", value: 1, errCtx });\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n    }\r\n    return ins;\r\n  }\r\n  const headIns: Ins[] = [];\r\n  //Head is a expression or parameter\r\n  if (\r\n    typ === \"(\" ||\r\n    has(\r\n      params.map(({ name }) => name),\r\n      text,\r\n    ) ||\r\n    sub(\"%#@\", strIdx(text, 0))\r\n  ) {\r\n    tokens.unshift(head);\r\n    const ins = parseArg(tokens, params);\r\n    if (inPartial) {\r\n      headIns.push({ typ: \"exp\", value: len(ins), errCtx });\r\n    }\r\n    push(headIns, ins);\r\n  }\r\n  const parsedArgs = parseAll(tokens, params);\r\n  const [body, nArgs] = [flat(parsedArgs), len(parsedArgs)];\r\n  if (op === \"return\") {\r\n    return [...body, { typ: \"ret\", value: !!len(body), errCtx }];\r\n  }\r\n\r\n  //Operation arity check, optionally disabled for partial closures\r\n  if (ops[op] && !inPartial) {\r\n    const errors = arityCheck(op, nArgs, errCtx);\r\n    push(headIns, errors?.map(e => err(e.m)[0]) ?? []);\r\n    if (!errors) {\r\n      //Upgrade some math and logic functions to their fast counterparts\r\n      if (nArgs === 2 && ops[`fast${op}`]) {\r\n        op = `fast${op}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (len(headIns)) {\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  } else {\r\n    const value: Val =\r\n      typ === \"num\"\r\n        ? { t: \"num\", v: toNum(op) }\r\n        : starts(op, \":\")\r\n        ? { t: \"key\", v: op }\r\n        : ops[op]\r\n        ? { t: \"func\", v: op }\r\n        : op === \"true\" || op === \"false\"\r\n        ? { t: \"bool\", v: op === \"true\" }\r\n        : { t: \"str\", v: op };\r\n    headIns.push({ typ: \"val\", value, errCtx });\r\n    headIns.push({ typ: \"exe\", value: nArgs, errCtx });\r\n  }\r\n  return [...body, ...headIns];\r\n}\r\n\r\nfunction parseArg(\r\n  tokens: Token[],\r\n  params: ParamsShape,\r\n  inPartial = false,\r\n): ParserIns[] {\r\n  if (!len(tokens)) {\r\n    return [];\r\n  }\r\n  const { typ, text, errCtx } = tokens.shift() as Token;\r\n  //Upon closure\r\n  const isClosure =\r\n    typ === \"sym\" && sub(\"#@\", text) && len(tokens) && tokens[0].typ === \"(\";\r\n  const isParamClosure = typ === \"(\" && len(tokens) && tokens[0].text === \"fn\";\r\n  if (isClosure || isParamClosure) {\r\n    const texts = tokens.map(t => t.text);\r\n    const fnIns = isParamClosure ? tokens.shift() : undefined;\r\n    const ins: ParserIns[] = [];\r\n    if (isParamClosure) {\r\n      const parsedParams = parseParams(tokens);\r\n      params = parsedParams.params;\r\n      push(ins, parsedParams.errors);\r\n      if (tokens[0].typ === \")\") {\r\n        return [\r\n          { typ: \"err\", value: `fn requires a body`, errCtx: fnIns!.errCtx },\r\n        ];\r\n      }\r\n      tokens.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      tokens.unshift({ typ: \"(\", text: \"(\", errCtx });\r\n    }\r\n    push(ins, parseArg(tokens, params, text === \"@\"));\r\n    const errors = ins.filter(t => t.typ === \"err\");\r\n    if (len(errors)) {\r\n      return errors;\r\n    }\r\n    if (isParamClosure) {\r\n      ins.forEach(i => {\r\n        if (i.typ === \"npa\") {\r\n          i.typ = \"upa\";\r\n        }\r\n      });\r\n    }\r\n    const value: [string, Ins[]] = [\r\n      (isParamClosure ? \"(\" : text) +\r\n        slice(texts, 0, len(texts) - len(tokens)).join(\" \"),\r\n      <Ins[]>ins,\r\n    ];\r\n    return [{ typ: text === \"@\" ? \"par\" : \"clo\", value, errCtx }];\r\n  }\r\n  switch (typ) {\r\n    case \"str\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"str\", v: text }, errCtx }];\r\n    case \"num\":\r\n      return [{ typ: \"val\", value: <Val>{ t: \"num\", v: toNum(text) }, errCtx }];\r\n    case \"sym\":\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (\r\n        has(\r\n          params.map(({ name }) => name),\r\n          text,\r\n        )\r\n      ) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    case \"(\":\r\n      return parseForm(tokens, params, inPartial);\r\n    case \")\":\r\n    case \"rem\":\r\n      return [];\r\n    default:\r\n      return assertUnreachable(typ);\r\n  }\r\n}\r\n\r\n/** Accepts tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  tokens: Token[],\r\n  forVar = false,\r\n): { params: ParamsShape; errors: ParserIns[] } {\r\n  if (!len(tokens) || tokens[0].typ === \")\") {\r\n    return { params: [], errors: [] };\r\n  }\r\n  let depth = 0;\r\n  const destructs: Token[][] = [];\r\n  let destruct: Token[] = [];\r\n  let hitNonParam = 0;\r\n  while (len(tokens)) {\r\n    if (!depth) {\r\n      destructs.push([]);\r\n      destruct = destructs[len(destructs) - 1];\r\n    }\r\n    depth += depthChange(tokens[0]);\r\n    if (depth < 0) {\r\n      break;\r\n    }\r\n    destruct.push(tokens.shift()!);\r\n    if (destruct[0].typ === \"sym\" && sub(\"#@%\", destruct[0].text)) {\r\n      tokens.unshift(destruct[0]);\r\n      destructs.pop();\r\n      hitNonParam = 1;\r\n      break;\r\n    }\r\n    if (\r\n      len(destruct) > 1 &&\r\n      (destruct[1].typ !== \"sym\" || destruct[1].text !== \"vec\")\r\n    ) {\r\n      hitNonParam = 2;\r\n      break;\r\n    }\r\n    if (forVar && !depth) {\r\n      if (len(destruct) === 1) {\r\n        tokens.unshift(destruct[0]);\r\n        return { params: [], errors: [] };\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (hitNonParam === 2 && depth > 0) {\r\n    tokens.unshift(destruct[1]);\r\n    tokens.unshift(destruct[0]);\r\n    destructs.pop();\r\n  } else {\r\n    if (depth < 0) {\r\n      //We reached ) early\r\n      destructs.pop();\r\n      destructs\r\n        .pop()!\r\n        .reverse()\r\n        .forEach(t => tokens.unshift(t));\r\n    } else if (!hitNonParam && !forVar) {\r\n      //Everything was a valid parameter so the last one is the body\r\n      const last = destructs.pop()!;\r\n      if (len(last) === 1 && last[0].typ === \")\") {\r\n        push(tokens, destructs.pop()!);\r\n      }\r\n      push(tokens, last);\r\n    }\r\n  }\r\n  const params: ParamsShape = [];\r\n  const errors: ParserIns[] = [];\r\n  const position: number[] = [0];\r\n  destructs.forEach(destruct => {\r\n    destruct.forEach(({ typ, text, errCtx }) => {\r\n      if (typ === \"sym\") {\r\n        if (text === \"vec\") {\r\n          return;\r\n        }\r\n        params.push({ name: text, position: slice(position) });\r\n        ++position[len(position) - 1];\r\n        return;\r\n      }\r\n      if (typ === \"(\") {\r\n        position.push(0);\r\n      } else if (typ === \")\") {\r\n        position.pop();\r\n        ++position[len(position) - 1];\r\n      } else {\r\n        errors.push({\r\n          typ: \"err\",\r\n          value: `disallowed in destructuring`,\r\n          errCtx,\r\n        });\r\n      }\r\n    });\r\n    //++position[0];\r\n  });\r\n  return { params, errors };\r\n}\r\n\r\nfunction syntaxise(\r\n  { name, tokens }: NamedTokens,\r\n  errCtx: ErrCtx,\r\n): [\"func\", Func] | [\"err\", InvokeError] {\r\n  const err = (m: string, eCtx = errCtx) =>\r\n    <ReturnType<typeof syntaxise>>[\"err\", { e: \"Parse\", m, errCtx: eCtx }];\r\n  //In the case of e.g. (function (+)) or (function)\r\n  if (name === \"(\" || name === \")\") {\r\n    return err(\"nameless function\");\r\n  }\r\n  //In the case of e.g. (function name)\r\n  if (tokens[0].typ === \")\") {\r\n    return err(\"empty function body\");\r\n  }\r\n  const { params, errors: ins } = parseParams(tokens);\r\n  while (len(tokens)) {\r\n    push(ins, parseArg(tokens, params));\r\n  }\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const x = ins[i];\r\n    if (x.typ === \"err\") {\r\n      return err(x.value, x.errCtx);\r\n    }\r\n  }\r\n  return [\"func\", { name, ins: <Ins[]>ins }];\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"exp\":\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  sourceId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, sourceId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const segments = segment(tokens);\r\n  const labelled = funcise(segments);\r\n  const funcsAndErrors = labelled.map(named =>\r\n    syntaxise(named, {\r\n      sourceId: sourceId,\r\n      line: named.errCtx.line,\r\n      col: named.errCtx.col,\r\n    }),\r\n  );\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  funcsAndErrors.forEach(fae => {\r\n    if (fae[0] === \"err\") {\r\n      errors.push(fae[1]);\r\n    } else {\r\n      okFuncs.push(fae[1]);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key} not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation ${name} does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) true) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hello\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(((fn (fn 1))))`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type-errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    sourceId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print(str, withNewLine) {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return val.v.name;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n","export const insituxVersion = 20211208;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[1].v;\r\n        _num(round(<number>args[0].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")) ||\r\n          (op === \"wild?\" && args[0].t === \"wild\"),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const array = asArray(args.shift()!);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        _vec(filtered);\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, end = len(args); i < end; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      const src = asArray(args[0]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[len(args) - 1])\r\n          .split(len(args) - 1 ? str(args[0]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts-with?\":\r\n    case \"ends-with?\":\r\n      _boo((op === \"starts-with?\" ? starts : ends)(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const sourceId = `${errCtx.sourceId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), sourceId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  const monoArityError = [\r\n    {\r\n      e: \"Arity\",\r\n      m: `${typeNames[op.t]} as op requires one sole argument`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError;\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a);\r\n      if (abs(n) >= len(arr)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[len(arr) + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError;\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"dictionary as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          {\r\n            e: \"Arity\",\r\n            m: \"boolean as operation takes one or two arguments only\",\r\n            errCtx,\r\n          },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const paramsShape = ins.value;\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        paramsShape.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[len(lets) - 1][name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets[len(lets) - 1]) {\r\n          stack.push(lets[len(lets) - 1][name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, false);\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[len(lets) - 1][\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const name = ins.value[0];\r\n        let cins = ins.value[1];\r\n        const isCapture = ({ typ, value }: Ins, i: number) =>\r\n          (typ === \"ref\" &&\r\n            !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n          typ === \"npa\" ||\r\n          (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\r\n        const derefFunc: Func = {\r\n          name: \"\",\r\n          ins: cins\r\n            .map((ins, i) => {\r\n              if (i + 1 === len(cins)) {\r\n                return ins;\r\n              }\r\n              const possibleLet =\r\n                ins.typ === \"val\" &&\r\n                ins.value.t === \"str\" &&\r\n                cins[i + 1].typ === \"exe\" &&\r\n                lets[len(lets) - 1][ins.value.v];\r\n              return possibleLet\r\n                ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                : ins;\r\n            })\r\n            .filter(isCapture),\r\n        };\r\n        const errors = exeFunc(ctx, derefFunc, args, true);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        const numIns = len(derefFunc.ins);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        cins = cins.map((ins, i) =>\r\n          isCapture(ins, i)\r\n            ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n            : ins,\r\n        );\r\n        //Rewrite partial closure to #(... func [args] args)\r\n        if (ins.typ === \"par\") {\r\n          const { value: exeNumArgs, errCtx } = cins.pop()!;\r\n          //If has expression as head\r\n          if (len(cins) > 0 && cins[len(cins) - 1].typ === \"exe\") {\r\n            const headStartIdx = cins.findIndex(i => i.typ === \"exp\");\r\n            const head = splice(cins, headStartIdx, len(cins) - headStartIdx);\r\n            push(head, cins);\r\n            cins = head;\r\n          } else {\r\n            cins.unshift(cins.pop()!);\r\n          }\r\n          cins.push({ typ: \"upa\", value: -1, errCtx });\r\n          cins.push({\r\n            typ: \"val\",\r\n            value: <Val>{ t: \"str\", v: \"...\" },\r\n            errCtx,\r\n          });\r\n          cins.push({ typ: \"exe\", value: <number>exeNumArgs + 2, errCtx });\r\n        }\r\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        break;\r\n      }\r\n      case \"exp\":\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, sourceId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param sourceId A unique ID used in immediate or future invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = parseAndExe(ctx, code, sourceId);\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n): InvokeResult | undefined {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = exeFunc(ctx, ctx.env.funcs[funcName], params);\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  const value = stack.pop()!;\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"while\"] : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(ctx: Ctx, code: string): InvokeOutput {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const valOrErrs = invoke(ctx, code, uuid, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\r\n    const invocation = invocations.get(sourceId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","typeNames","null","bool","ref","func","clo","wild","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","falseVal","depthChange","typ","parseAll","tokens","arg","parseArg","inPartial","text","shift","isClosure","isParamClosure","texts","fnIns","ins","parsedParams","parseParams","errors","unshift","forEach","name","param","position","head","err","eCtx","when","parsedDestructuring","def","defIns","cond","ifT","ifF","extraneousBranch","insCount","acc","as","otherwise","pop","headIns","parsedArgs","body","nArgs","parseForm","forVar","depth","destructs","destruct","hitNonParam","last","insErrorDetect","fins","stack","lim","badMatch","okTypes","headIs","badArg","parse","code","sourceId","stringError","makeCollsOps","emitComments","inString","isEscaped","inStringAt","inSymbol","inNumber","inHex","inComment","line","col","l","c","nextCh","n","isWhite","isDigit","ch","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","funcsAndErrors","segments","isFunc","entries","described","funcise","token","segment","named","syntaxise","okFuncs","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","getExe","ctx","checkArity","monoArityError","external","valOrErr","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","d","shortest","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","newKey","shape","pos","inClosure","stackLen","tooManyLoops","paramsShape","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","exeNumArgs","headStartIdx","parsed","printResult","handler","removeExternalOperations","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}