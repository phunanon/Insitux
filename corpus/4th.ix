"
: dup 0 pick ;
: drop 0 pop ;
: over 1 pick ;
: swap 1 pick 2 pop ;
: nip 1 pop ;
: tuck swap over ;
: rot 2 pick 3 pop ;
: -rot 2 pick 2 pick 3 pop 3 pop ;
: 2drop drop drop ;
: 2dup over over ;
: ?dup dup if dup then ;
: fib dup 1 > if dup 1 - fib swap 2 - fib + then ;
"

(var words {} stack [])

(function split-parts parts
  (let reducer (fn x y
    (if ([":" ";"] y)
        (append [] x)
        (update-at [-1] (append y) x))))
  (reduce reducer [[]] parts))

(function 4th code
  (return-when (empty? code) stack)

  (let parts (if (vec? code) code (-> code (replace "\n" " ") (split " ")))
       parts (map @(or (to-num %)) parts))

  ;Extract word definitions
  (let groups   (split-parts parts)
       defs     (skip-each 1 (skip 1 groups))
       sentence (flatten (skip-each 1 groups)))
  (for def defs
    (var! words assoc (0 def) (skip 1 def)))

  ;Print new word definitions
  (let names (join " " (map 0 defs)))
  (if (empty? sentence)
    (return names)
    (unless (empty? defs) (print names)))

  (let if-depth 0)
  (for word sentence
    (if (< 0 if-depth)
      (do (let! if-depth (match word "if" inc "else" dec "then" dec val))
          stack)
      (var stack
        (satisfy word
          ["true" "false"]
            (append (= word "true") stack)
          ["+" "-" "*" "/" "=" "<" ">"]
            (append (word (-2 stack) (-1 stack)) (crop 0 2 stack))
          (= "pop")
            (drop (-> stack -1 inc neg) (trunc 1 stack))
          (= "pick")
            (append (-> stack -1 inc inc neg #(% stack)) (trunc 1 stack))
          (= "call")
            (4th (into ["pop"] (words (-1 stack))))
          (= "if")
            (do (unless (-1 stack) (let if-depth 1)) (trunc 1 stack))
          (= "else")
            (do (let if-depth 1) stack)
          (= "then")
            stack
          words
            (4th (words word))
          (criteria str? (starts? '"') (ends? '"'))
            (append (crop 1 1 word) stack)
          (criteria str? (starts? "'"))
            (append (skip 1 word) stack)
          (append word stack)))))
  stack)

(print "pick pop")
(while (let input (prompt "> "))
  (print (4th input)))
"Goodbye."
