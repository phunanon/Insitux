{
	"index.ts": {
		"description": ["internal insitux functions"],
		"list": [
			{
				"directory": "function",
				"description": [
					"(function sum a b (+ a b))",
					"syntax",
					"Defines a new function."
				]
			},
			{
				"directory": "fn",
				"description": [
					"(fn a b (+ a b))",
					"syntax",
					"Creates a parameterised closure."
				]
			},
			{
				"directory": "var",
				"description": [
					"(var a 1 b 2 c 3)",
					"syntax",
					"Defines one or more variables for later use anywhere in the program."
				]
			},
			{
				"directory": "let",
				"description": [
					"(let a 1 b 2 c 3)",
					"syntax",
					"Defines one or more variables for later use within the same function call."
				]
			},
			{
				"directory": "if",
				"description": [
					"(if true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition and executes either the second or third argument (or null)."
				]
			},
			{
				"directory": "if!",
				"description": [
					"(if! true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition and executes either the third or second argument (or null)."
				]
			},
			{
				"directory": "match",
				"description": [
					"(match something, [:a :b] 0, [_ :a] 1)",
					"syntax",
					"Matches a value with each case and executes and returns the corresponding value, else a default final value or false."
				]
			},
			{
				"directory": "and",
				"description": [
					"(and null (print \"hi\"))",
					"syntax and function",
					"Tests each argument and returns true or false if all arguments are truthy.",
					"Note: short-circuits evaluation after falsy argument."
				]
			},
			{
				"directory": "or",
				"description": [
					"(and null true (print \"hi\"))",
					"syntax and function",
					"Returns first truthy argument or false.",
					"Note: short-circuits evaluation after first truthy argument."
				]
			},
			{
				"directory": "when",
				"description": [
					"(when true (print \"hi\") (print \"bye\"))",
					"syntax",
					"Tests a condition and executes its body else returns null."
				]
			},
			{
				"directory": "while",
				"description": [
					"(while (pos? n) (print \"hi\") (var n (dec n)))",
					"syntax",
					"Loops all arguments so long as the first argument is true."
				]
			},
			{
				"directory": "return",
				"description": [
					"(function f (return 123) (print \"hello\"))",
					"syntax",
					"Returns its last argument early from a function."
				]
			},
			{
				"directory": "catch",
				"description": [
					"(catch (+) errors)",
					"syntax",
					"Evaluates the first argument and returns the value if no runtime errors, else populates the let `errors` and returns the evaluation of the second argument"
				]
			},
			{
				"directory": "print",
				"description": [
					"(print \"2 + 2 = \" (+ 2 2))",
					"function",
					"Prints a line of text, joining its arguments together."
				]
			},
			{
				"directory": "+",
				"description": [
					"(+ 1 2 3)",
					"function",
					"Sums together its arguments."
				]
			},
			{
				"directory": "-",
				"description": [
					"(- 3 2 1)",
					"function",
					"Subtracts each argument from the previous in turn."
				]
			},
			{
				"directory": "*",
				"description": [
					"(* 10 10 10)",
					"function",
					"Multiplies all its arguments together."
				]
			},
			{
				"directory": "/",
				"description": [
					"(/ 10 5 2)",
					"function",
					"Divides each argument by the next in turn."
				]
			},
			{
				"directory": "//",
				"description": [
					"(// 10 3)",
					"function",
					"Divides and retains the quotient each argument by the next in turn."
				]
			},
			{
				"directory": "**",
				"description": [
					"(** 10 2)",
					"function",
					"Returns its first argument to the power of its second argument."
				]
			},
			{
				"directory": "abs",
				"description": [
					"(abs -123)",
					"function",
					"Returns absolute of a number."
				]
			},
			{
				"directory": "sin",
				"description": [
					"(sin (pi))",
					"function",
					"Returns sine of a radian angle."
				]
			},
			{
				"directory": "cos",
				"description": [
					"(cos (pi))",
					"function",
					"Returns cosine of a radian angle."
				]
			},
			{
				"directory": "tan",
				"description": [
					"(tan (* 45 (/ (pi) 180)))",
					"function",
					"Returns tangent of a radian angle."
				]
			},
			{
				"directory": "sqrt",
				"description": [
					"(sqrt 25)",
					"function",
					"Returns the square root of a number."
				]
			},
			{
				"directory": "rem",
				"description": [
					"(rem 10 2)",
					"function",
					"Returns the remainder of a division."
				]
			},
			{
				"directory": "round",
				"description": [
					"(round 3.5 2)",
					"function",
					"Rounds a number to the nearest integer or decimal provided."
				]
			},
			{
				"directory": "floor",
				"description": [
					"(floor 3.9)",
					"function",
					"Rounds a number down to the nearest integer."
				]
			},
			{
				"directory": "ceil",
				"description": [
					"(ceil 3.1)",
					"function",
					"Rounds a number up to the nearest integer."
				]
			},
			{
				"directory": "logn",
				"description": [
					"(logn 1)",
					"function",
					"Returns the natural logarithm of a number."
				]
			},
			{
				"directory": "log2",
				"description": [
					"(log2 8)",
					"function",
					"Returns the logarithm base 2 of a number."
				]
			},
			{
				"directory": "log2",
				"description": [
					"(log2 1000)",
					"function",
					"Returns the logarithm base 10 of a number."
				]
			},
			{
				"directory": "min",
				"description": [
					"(min 1 2 3)",
					"function",
					"Returns the smallest number of its arguments."
				]
			},
			{
				"directory": "max",
				"description": [
					"(max 1 2 3)",
					"function",
					"Returns the largest number of its arguments."
				]
			},
			{
				"directory": "pi",
				"description": [
					"(pi)",
					"function",
					"Returns the mathematical Pi."
				]
			},
			{
				"directory": "inc",
				"description": [
					"(inc 123)",
					"function",
					"Returns its argument +1 (incremented)."
				]
			},
			{
				"directory": "dec",
				"description": [
					"(dec 123)",
					"function",
					"Returns its argument -1 (decremented)."
				]
			},
			{
				"directory": "=",
				"description": [
					"(= 123 my-variable)",
					"function",
					"Tests if all arguments are equal to one another."
				]
			},
			{
				"directory": "!=",
				"description": [
					"(!= 123 456)",
					"function",
					"Tests if each argument is different from the previous."
				]
			},
			{
				"directory": "<",
				"description": [
					"(< 1 2 3)",
					"function",
					"Tests if arguments are increasing in value."
				]
			},
			{
				"directory": ">",
				"description": [
					"(> 3 2 1)",
					"function",
					"Tests if arguments are decreasing in value."
				]
			},
			{
				"directory": "<=",
				"description": [
					"(<= 3 3 4 5)",
					"function",
					"Tests if arguments are not decreasing in value."
				]
			},
			{
				"directory": ">=",
				"description": [
					"(>= 4 4 3 2 2 1)",
					"function",
					"Tests if arguments are not increasing in value."
				]
			},
			{
				"directory": "vec",
				"description": [
					"(vec 1 \"hello\" :c)",
					"function",
					"Returns a vector of its arguments, exactly as using […]."
				]
			},
			{
				"directory": "dict",
				"description": [
					"(dict 1 \"hello\" :c \"world\")",
					"function",
					"Returns a dictionary of its arguments, exactly as using {…}."
				]
			},
			{
				"directory": "len",
				"description": [
					"(len \"hello\")",
					"function",
					"Returns the length of a string, vector, or number of dictionary entries."
				]
			},
			{
				"directory": "rand-int",
				"description": [
					"(rand-int 10 20)",
					"function",
					"Returns a random whole number between its two arguments;",
					"or, provided no arguments a random 0 or 1;",
					"or, provided one argument a random whole number between 0 and that."
				]
			},
			{
				"directory": "rand",
				"description": [
					"(rand)",
					"function",
					"Returns a random number between 0 and 1;",
					"or, provided one argument a random number between 0 and that;",
					"or, provided two arguments a random number between those two."
				]
			},
			{
				"directory": "map",
				"description": [
					"(map str [0 1 2] \"abc\")",
					"function",
					"Returns a vector of calling a function with each of all the items or characters of one or more vectors or strings as arguments."
				]
			},
			{
				"directory": "for",
				"description": [
					"(for str [0 1 2] \"abc\")",
					"function",
					"Returns a vector of calling a function with every combination of vector item or string characters as arguments."
				]
			},
			{
				"directory": "reduce",
				"description": [
					"(reduce + [1 2 3])",
					"function",
					"Calls a function repeatedly with each vector item or string character and the result from the previous function result."
				]
			},
			{
				"directory": "while",
				"description": [
					"(while (< n 5) (do-something) (var n (inc n)))",
					"function",
					"Runs expressions until its condition (first argument) is false."
				]
			},
			{
				"directory": "str",
				"description": [
					"(str \"Hello, \" \"world!\")",
					"function",
					"Concatenates its arguments into one string."
				]
			},
			{
				"directory": ".",
				"description": [
					"(. + 2 2)",
					"function",
					"Treats its arguments as an expression, first argument as the expression head."
				]
			},
			{
				"directory": "..",
				"description": [
					"(.. + [0 1] 2 [3 4])",
					"function",
					"Applies a vector's items and other arguments as the arguments to a function."
				]
			},
			{
				"directory": "...",
				"description": [
					"(... + 0 1 2 [3 4])",
					"function",
					"Applies a final vector's items and other arguments as the parameters to a function."
				]
			},
			{
				"directory": "into",
				"description": [
					"(into [0 1] {3 4 5 6})",
					"function",
					"Returns the concatenation of vectors and dictionaries."
				]
			},
			{
				"directory": "push",
				"description": [
					"(push [0 1 2] 3)",
					"function",
					"Returns a vector or dictionary with one item or key-value pair appended;",
					"or, inserts a value into a vector at a specified index;",
					"or, removes a key from a dictionary."
				]
			},
			{
				"directory": "sect",
				"description": [
					"(sect \"Hello, world!\" 1 3)",
					"function",
					"Returns a section of a vector or string."
				]
			},
			{
				"directory": "has?",
				"description": [
					"(has? \"Hello\" \"ll\")",
					"function",
					"Tests if a string contains a sub-string."
				]
			},
			{
				"directory": "to-num",
				"description": [
					"(to-num \"123\")",
					"function",
					"Converts a string to a number."
				]
			},
			{
				"directory": "to-key",
				"description": [
					"(to-key \"hello\")",
					"function",
					"Converts a string or number into a keyword."
				]
			},
			{
				"directory": "keys",
				"description": [
					"(keys {0 1 2 3})",
					"function",
					"Returns the keys of a dictionary."
				]
			},
			{
				"directory": "vals",
				"description": [
					"(vals {0 1 2 3})",
					"function",
					"Returns the vals of a dictionary."
				]
			},
			{
				"directory": "idx",
				"description": [
					"(idx [1 2 3] 2)",
					"function",
					"Returns index of an item or sub-string in a vector or string, or null;",
					"or, replaces an item or character with another at a specified index."
				]
			},
			{
				"directory": "odd?",
				"description": [
					"(odd? 5)",
					"function",
					"Tests if number is odd."
				]
			},
			{
				"directory": "even?",
				"description": [
					"(even? 4)",
					"function",
					"Tests if number is even."
				]
			},
			{
				"directory": "filter",
				"description": [
					"(filter odd? [0 1 2 3])",
					"function",
					"Filters a vector or string by a function, optionally passing extra arguments. Returns the same type that is provided."
				]
			},
			{
				"directory": "remove",
				"description": [
					"(remove odd? [0 1 2 3])",
					"function",
					"Negatively filters a vector or string by a function, optionally passing extra arguments. Returns the same type that is provided."
				]
			},
			{
				"directory": "find",
				"description": [
					"(find odd? [0 1 2 3])",
					"function",
					"Returns the first item in the vector or string matching a predicate, optionally passing extra arguments."
				]
			},
			{
				"directory": "count",
				"description": [
					"(count odd? (range 10))",
					"function",
					"Returns the number of items or characters in a vector or string matching a predicate, optionally passing extra arguments"
				]
			},
			{
				"directory": "repeat",
				"description": [
					"(repeat 1 10)",
					"function",
					"Returns a vector of either a function called N times with the incrementation, or a value repeated N times"
				]
			},
			{
				"directory": "->",
				"description": [
					"(-> \"hello\" 1 upper-case)",
					"function",
					"\"Thread\" return values into the next function, seeded with first argument"
				]
			},
			{
				"directory": "reverse",
				"description": [
					"(reverse [0 1 2 3])",
					"function",
					"Returns the reverse of a vector or string."
				]
			},
			{
				"directory": "sort",
				"description": [
					"(sort [8 6 9 0 4] sin)",
					"function",
					"Sorts a vector of numbers or strings, optionally sorting by the return of a function of each item."
				]
			},
			{
				"directory": "starts-with?",
				"description": [
					"(starts-with? \"Hello\" \"He\")",
					"function",
					"Tests if a string starts with another string."
				]
			},
			{
				"directory": "ends-with?",
				"description": [
					"(ends-with? \"hello\" \"lo\")",
					"function",
					"Tests if a string ends with another string."
				]
			},
			{
				"directory": "lower-case",
				"description": [
					"(lower-case \"HELLO\")",
					"function",
					"Returns a string made entirely lower-case."
				]
			},
			{
				"directory": "upper-case",
				"description": [
					"(lower-case \"hello\")",
					"function",
					"Returns a string made entirely upper-case."
				]
			},
			{
				"directory": "str*",
				"description": [
					"(str* \"hello \" 6)",
					"function",
					"Returns a string repeated a specified number of times"
				]
			},
			{
				"directory": "char-code",
				"description": [
					"(char-code \"hello \")",
					"function",
					"Returns the code associated with a string's first or Nth character, or null",
					"Or returns a string with the associated supplied character code"
				]
			},
			{
				"directory": "split",
				"description": [
					"(split \"e\" \"hello\")",
					"function",
					"Splits a string into a vector by spaces or a provided string."
				]
			},
			{
				"directory": "join",
				"description": [
					"(join \", \" [0 1 2 3])",
					"function",
					"Joins a vector into a string by a provided string."
				]
			},
			{
				"directory": "time",
				"description": [
					"(time)",
					"function",
					"Returns the time in milliseconds."
				]
			},
			{
				"directory": "pos?",
				"description": [
					"(pos? 5)",
					"function",
					"Tests if a number is positive."
				]
			},
			{
				"directory": "neg?",
				"description": [
					"(neg? -5)",
					"function",
					"Tests if a number is negative."
				]
			},
			{
				"directory": "zero?",
				"description": [
					"(zero? 0)",
					"function",
					"Tests if a value is 0."
				]
			},
			{
				"directory": "null?",
				"description": [
					"(null? null)",
					"function",
					"Tests if a value is null."
				]
			},
			{
				"directory": "num?",
				"description": [
					"(num? 123)",
					"function",
					"Tests if a value is number."
				]
			},
			{
				"directory": "bool?",
				"description": [
					"(bool? true)",
					"function",
					"Tests if a value is boolean."
				]
			},
			{
				"directory": "str?",
				"description": [
					"(str? \"hi\")",
					"function",
					"Tests if a value is string."
				]
			},
			{
				"directory": "dict?",
				"description": [
					"(dict? {})",
					"function",
					"Tests if a value is dictionary."
				]
			},
			{
				"directory": "vec?",
				"description": [
					"(vec? [])",
					"function",
					"Tests if a value is vector."
				]
			},
			{
				"directory": "key?",
				"description": [
					"(key? :abc)",
					"function",
					"Tests if a value is keyword."
				]
			},
			{
				"directory": "func?",
				"description": [
					"(func? +)",
					"function",
					"Tests if a value is function."
				]
			},
			{
				"directory": "do",
				"description": [
					"(do (print-str \"hello\") 1 2 3)",
					"function",
					"Returns its last argument."
				]
			},
			{
				"directory": "val",
				"description": [
					"(val 3 2 1 (print-str \"hello\"))",
					"function",
					"Returns its first argument."
				]
			},
			{
				"directory": "range",
				"description": [
					"(range 0 10 (print-str \"hello\"))",
					"function",
					"Returns its first argument."
				]
			},
			{
				"directory": "eval",
				"description": [
					"(eval \"(+ 2 2)\")",
					"function",
					"Evaluates a string as code, returning any values returned or null."
				]
			}
		]
	},
	"main.ts": {
		"description": [
			"basic shobfix environment definitions to interface with your console or provide basic functionality"
		],
		"list": [
			{
				"directory": "load",
				"description": [
					"(load \"link\")",
					"function",
					"loads the code provided by website from `link`"
				]
			},
			{
				"directory": "print",
				"description": [
					"(print ...)",
					"function",
					"prints supplied args to the console"
				]
			},
			{
				"directory": "time",
				"description": [
					"(print (time))",
					"function",
					"Luau `tick()`"
				]
			},
			{
				"directory": "ticked.connect",
				"description": [
					"(ticked.connect ...)",
					"(function hello xyz (print \"deltatime:\" xyz))",
					"(ticked.connect hello)",
					"function",
					"connects to a shobfix event that runs every 0.1s"
				]
			},
						{
				"directory": "ticked.kill",
				"description": [
					"(ticked.kill)",
					"function",
					"kills all ticked connections"
				]
			},
			{
				"directory": "clear",
				"description": [
					"(clear)",
					"function",
					"clears the console"
				]
			},			
			{
				"directory": "typeof",
				"description": [
					"(typeof arg)",
					"function",
					"returns a string type of `arg`"
				]
			},			
			{
				"directory": "wait",
				"description": [
					"(wait n)",
					"function",
					"waits for `n` seconds",
					"alias for Luau `wait()`"
				]
			}
		]
	},
	"dl.ts": {
		"description": [
			"deadline environment definitions to do things like set the time, change the map or gamemode"
		],
		"list": [
			{
				"directory": "$dl.players.${any}.name",
				"description": [
					"(print $dl.players.${any}.name)",
					"readonly string value",
					"name of \"${any}\", if a player named ${any} is ingame"
				]
			},
			{
				"directory": "$dl.players.${any}.health",
				"description": [
				    "(print $dl.players.${any}.health)",
				    "number value",
				    "health of \"${any}\", if they are alive",
							"returns -1 if they are not"
				]
		    	},
			{
				"directory": "$dl.players.${any}.kick",
				"description": [
					"(dl.players.${any}.kick)",
					"function",
					"kicks \"${any}\""
				]
			},
			{
				"directory": "$dl.players.${any}.serverban",
				"description": [
					"(dl.players.${any}.serverban)",
					"function",
					"serverbans \"${any}\", preventing them from joining the server they got kicked from"
				]
			},
			{
				"directory": "$dl.players.${any}.explode",
				"description": [
					"(dl.players.${any}.explode)",
					"function",
					"blows up ${any}"
				]
			},
			{
				"directory": "$dl.players.${any}.kill",
				"description": [
					"(dl.players.${any}.kill)",
					"function",
					"kills ${any}"
				]
			},
			{
				"directory": "$dl.players.${any}.team",
				"description": [
					"(print $dl.players.${any}.team)",
					"($dl.players.${any}.team team)",
					"string value",
					"team of \"${any}\", can be set to either security or insurgent"
				]
			},	
			{
				"directory": "$dl.players.${any}.position",
				"description": [
					"(print $dl.players.${any}.position)",
					"($dl.players.${any}.position [x y z])",
					"vector3 value",
					"the position of \"${any}\", can be set with a vector as shown above"
				]
			},	
			{
				"directory": "$dl.players.${any}.is_alive",
				"description": [
					"(print (dl.players.${any}.is_alive))",
					"function",
					"returns whether \"${any}\" is alive"
				]
			},
			{
				"directory": "$dl.globals.map.lighting",
				"description": [
					"(print $dl.globals.map.lighting)",
					"readonly string value",
					"current map lighting"
				]
			},
			{
				"directory": "$dl.globals.map.loaded",
				"description": [
					"(print $dl.globals.map.loaded)",
					"readonly boolean value",
					"idk to be honest it's completely useless internally"
				]
			},
			{
				"directory": "$dl.globals.map.title",
				"description": [
					"(print $dl.globals.map.title)",
					"readonly string value",
					"name of the current map"
				]
			},
			{
				"directory": "$dl.globals.tags",
				"description": [
					"(print $dl.globals.tags)",
					"unfinished; will likely allow for custom orb tags",
					"same ones as the ones used for capture points and teammates"
				]
			},
			{
				"directory": "$dl.globals.team_aliases",
				"description": [
					"(print $dl.globals.team_aliases)",
					"unfinished; will allow to change team names and colors"
				]
			},
			{
				"directory": "$dl.globals.base_player_weight",
				"description": [
					"(print $dl.globals.base_player_weight)",
					"number value",
					"default player weight; before any weapon weight calculation is done"
				]
			},
			{
				"directory": "$dl.globals.base_player_weight",
				"description": [
					"(print $dl.globals.base_player_weight)",
					"number value",
					"default player weight; before any weapon weight calculation is done"
				]
			},
			{
				"directory": "$dl.globals.builder_revision",
				"description": [
					"(print $dl.globals.builder_revision)",
					"readonly number value",
					"current revision of the weapon builder"
				]
			},
			{
				"directory": "$dl.globals.channel_type",
				"description": [
					"(print $dl.globals.channel_type)",
					"readonly string value",
					"game channel type"
				]
			},
			{
				"directory": "$dl.globals.chat_tip_frequency",
				"description": [
					"(print $dl.globals.chat_tip_frequency)",
					"number value",
					"frequency of chat tips"
				]
			},
			{
				"directory": "$dl.globals.chat_tips_enabled",
				"description": [
					"(print $dl.globals.chat_tips_enabled)",
					"bool value",
					"sets whether chat tips appear"
				]
			},
			{
				"directory": "$dl.globals.enable_projectile_debug",
				"description": [
					"(print $dl.globals.enable_projectile_debug)",
					"bool value",
					"enables projectile debug lines"
				]
			},
						{
				"directory": "$dl.globals.enable_debug_overlay_ingame",
				"description": [
					"(print $dl.globals.enable_debug_overlay_ingame)",
					"bool value",
					"enables shobfix logger when spawned in"
				]
			},
			{
				"directory": "$dl.globals.day_cycle_speed",
				"description": [
					"(print $dl.globals.day_cycle_speed)",
					"number value",
					"how quickly the day passes"
				]
			},
			{
				"directory": "$dl.globals.disable_attachment_checks",
				"description": [
					"(print $dl.globals.disable_attachment_checks)",
					"bool value",
					"disables most builder attachment validity checks"
				]
			},
			{
				"directory": "$dl.globals.editor_mount_any",
				"description": [
					"(print $dl.globals.editor_mount_any)",
					"bool value",
					"disables mount_type builder validity checks, extremely stupid"
				]
			},
			{
				"directory": "$dl.globals.revision",
				"description": [
					"(print $dl.globals.revision)",
					"readonly number value",
					"game revision"
				]
			},
			{
				"directory": "$dl.globals.jump_frequency",
				"description": [
					"(print $dl.globals.jump_frequency)",
					"number value",
					"how often the players can jump"
				]
			},
			{
				"directory": "$dl.globals.pvp",
				"description": [
					"(print $dl.globals.pvp)",
					"bool value",
					"whether pvp is enabled"
				]
			},
			{
				"directory": "$dl.globals.spawn_enabled",
				"description": [
					"(print $dl.globals.spawn_enabled)",
					"bool value",
					"whether spawning is enabled"
				]
			},
			{
				"directory": "$dl.globals.team_kill",
				"description": [
					"(print $dl.globals.team_kill)",
					"bool value",
					"whether teamkilling is enabled"
				]
			},
			{
				"directory": "$dl.globals.time_offset",
				"description": [
					"(print $dl.globals.time_offset)",
					"number value",
					"day cycle offset in hours"
				]
			},
			{
				"directory": "$dl.globals.version",
				"description": [
					"(print $dl.globals.version)",
					"readonly string value",
					"game version"
				]
			},
			{
				"directory": "dl.events.on_chat_message",
				"description": [
					"(function sent sender channel contents (print sender \" \" channel \" \" contents))",
					"(dl.events.on_chat_message.connect sent)",
					"(wait 5)",
					"(dl.events.on_chat_message.kill sent)",
					"shobfix event",
					"fires whenever a player uses the chat"
				]
			},
			{
				"directory": "$dl.util.message",
				"description": [
					"(print $dl.util.message message)",
					"admin-restricted function",
					"prints message to server chat without text filtering"
				]
			},
						{
				"directory": "$dl.util.explosion",
				"description": [
					"(dl.util.explosion [x y z] grenade)",
					"(dl.util.explosion [0 0 0])",
					"(dl.util.explosion [0 0 0] \"TestGrenade\")",
					"function",
					"causes an explosion at position x y z with the specified grenade"
				]
			},
			{
				"directory": "$dl.util.fmessage",
				"description": [
					"(print $dl.util.fmessage message)",
					"admin-restricted function",
					"prints message to server chat"
				]
			},
			{
				"directory": "$dl.util.set_map",
				"description": [
					"(print $dl.util.set_map target_map)",
					"function",
					"sets current map to target_map"
				]
			},
			{
				"directory": "$dl.sound.play",
				"description": [
					"(dl.sound.play rbxassetid)",
					"(dl.sound.play \"rbxassetid://2297359893\")",
					"0.19.2+",
					"function",
					"plays a sound globally",
					"placeholder until a sound object is added",
					"in the game"
				]
			},
			{
				"directory": "dl.list_players",
				"description": [
					"(print (dl.list_players))",
					"function",
					"lists all players in the game"
				]
			}
		]
	},
	"test.ts": {
		"description": [
			"test functions"
		],
		"list": [
			{
				"directory": "$test.lua_error_test",
				"description": [
					"function",
					"shobfix error"
				]
			},			
			{
				"directory": "$test.shobfix_generic_error_test",
				"description": [
					"function",
					"shobfix error"
				]
			},			
			{
				"directory": "$test.shobfix_perm_error_test",
				"description": [
					"function",
					"permission error"
				]
			}
		]
	}
}


